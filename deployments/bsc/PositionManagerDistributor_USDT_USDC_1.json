{
  "address": "0x71868d7ed28ceCD3478C926dd16887A678A4E9C9",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "dataFeedAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pool0Address",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pool1Address",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiverAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "receiverFeePercentage",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPositionManagerDistributor.CreatePositionManagerParams",
          "name": "params",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidEntry",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotPool",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongCaller",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardsDistributed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiverAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "receiverPercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        }
      ],
      "name": "distributeRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "amount0Delta",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "amount1Delta",
          "type": "int256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "pancakeV3SwapCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract IPancakeV3Pool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharesContract",
      "outputs": [
        {
          "internalType": "contract PositionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdt",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usersSet",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usersTotalBalances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wnative",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xff3882484d011fca25c84138f9a634efc916699df84b5f2d7540237622dbac4c",
  "receipt": {
    "to": null,
    "from": "0xF5Aa4B5fD7681d7479b0d540b29F558fc0040133",
    "contractAddress": "0x71868d7ed28ceCD3478C926dd16887A678A4E9C9",
    "transactionIndex": 66,
    "gasUsed": "5287787",
    "logsBloom": "0x
    "blockHash": "0xd25076d2041f7f09a8cac085cdae0aca65eba2cc75c97438341cd6778295c809",
    "transactionHash": "0xff3882484d011fca25c84138f9a634efc916699df84b5f2d7540237622dbac4c",
    "logs": [
      {
        "transactionIndex": 66,
        "blockNumber": 49493969,
        "transactionHash": "0xff3882484d011fca25c84138f9a634efc916699df84b5f2d7540237622dbac4c",
        "address": "0x04C90D3Ced96aB052128900817a5e8063aB0c163",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000071868d7ed28cecd3478c926dd16887a678a4e9c9",
          "0x00000000000000000000000071868d7ed28cecd3478c926dd16887a678a4e9c9"
        ],
        "data": "0x",
        "logIndex": 313,
        "blockHash": "0xd25076d2041f7f09a8cac085cdae0aca65eba2cc75c97438341cd6778295c809"
      },
      {
        "transactionIndex": 66,
        "blockNumber": 49493969,
        "transactionHash": "0xff3882484d011fca25c84138f9a634efc916699df84b5f2d7540237622dbac4c",
        "address": "0x04C90D3Ced96aB052128900817a5e8063aB0c163",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f5aa4b5fd7681d7479b0d540b29f558fc0040133",
          "0x00000000000000000000000071868d7ed28cecd3478c926dd16887a678a4e9c9"
        ],
        "data": "0x",
        "logIndex": 314,
        "blockHash": "0xd25076d2041f7f09a8cac085cdae0aca65eba2cc75c97438341cd6778295c809"
      },
      {
        "transactionIndex": 66,
        "blockNumber": 49493969,
        "transactionHash": "0xff3882484d011fca25c84138f9a634efc916699df84b5f2d7540237622dbac4c",
        "address": "0x04C90D3Ced96aB052128900817a5e8063aB0c163",
        "topics": [
          "0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000071868d7ed28cecd3478c926dd16887a678a4e9c9",
          "0x00000000000000000000000071868d7ed28cecd3478c926dd16887a678a4e9c9"
        ],
        "data": "0x",
        "logIndex": 315,
        "blockHash": "0xd25076d2041f7f09a8cac085cdae0aca65eba2cc75c97438341cd6778295c809"
      }
    ],
    "blockNumber": 49493969,
    "cumulativeGasUsed": "13600818",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "dataFeedAddress": "0x51597f405303C4377E36123cBc172b13269EA163",
      "poolAddress": "0x92b7807bF19b7DDdf89b706143896d05228f3121",
      "pool0Address": "0x0000000000000000000000000000000000000000",
      "pool1Address": "0x92b7807bF19b7DDdf89b706143896d05228f3121",
      "receiverAddress": "0x802E6Ceed14c77BBb7F5d81660a9b1950c4CD752",
      "receiverFeePercentage": 300000
    },
    "0x172fcD41E0913e95784454622d1c3724f546f849"
  ],
  "numDeployments": 1,
  "solcInputHash": "b434754c4d24fe9f4c3f57df364be52d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"dataFeedAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool0Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool1Address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverFeePercentage\",\"type\":\"uint256\"}],\"internalType\":\"struct IPositionManagerDistributor.CreatePositionManagerParams\",\"name\":\"params\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidEntry\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongCaller\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsDistributed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"receiverPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"pancakeV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IPancakeV3Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharesContract\",\"outputs\":[{\"internalType\":\"contract PositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usersSet\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usersTotalBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wnative\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The rewards are distributed to the users and a specified receiver address\",\"errors\":{\"InvalidEntry()\":[{\"details\":\"Error thrown when the input is invalid\"}],\"NotEnoughBalance()\":[{\"details\":\"Error thrown when the balance is not enough\"}],\"NotPool()\":[{\"details\":\"Error thrown when the caller is not the pool\"}],\"WrongCaller()\":[{\"details\":\"Error thrown when the caller is not the PositionManager contract\"}]},\"events\":{\"RewardCollected(address,uint256)\":{\"params\":{\"amount\":\"Amount of USDT collected\",\"user\":\"Address of the user\"}},\"RewardsDistributed(uint256)\":{\"params\":{\"amount\":\"Amount of USDT distributed\"}}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"params\":{\"user\":\"Address of the user\"}},\"collectRewards()\":{\"details\":\"User must have a balance greater than 0\"},\"constructor\":{\"params\":{\"_pool\":\"Address of the PancakeSwap V3 pool of USDT/WNative\",\"params\":\"Parameters to create the PositionManager contract\"}},\"deposit(uint256)\":{\"params\":{\"depositAmount\":\"Amount of USDT to deposit\"}},\"distributeRewards(address,uint256,uint256)\":{\"details\":\"Only the PositionManager contract can call this function\",\"params\":{\"amountOutMin\":\"Minimum amount of wnative to receive\",\"receiverAddress\":\"Address of the receiver of the fees\",\"receiverPercentage\":\"Percentage of the funds destined to the receiver\"}},\"usersSet()\":{\"returns\":{\"_0\":\"Users set\"}}},\"stateVariables\":{\"_balances\":{\"details\":\"Mapping of the balances of the users\"},\"_usersSet\":{\"details\":\"Set of users that have deposited USDT\"}},\"title\":\"PositionManagerDistributor\",\"version\":1},\"userdoc\":{\"events\":{\"RewardCollected(address,uint256)\":{\"notice\":\"Event emitted when the user collects the rewards\"},\"RewardsDistributed(uint256)\":{\"notice\":\"Event emitted when the rewards are distributed\"}},\"kind\":\"user\",\"methods\":{\"DEFAULT_ADMIN_ROLE()\":{\"notice\":\"Default admin role\"},\"MAX_PERCENTAGE()\":{\"notice\":\"Maximum percentage value with 4 decimals\"},\"balanceOf(address)\":{\"notice\":\"Get the balance of a user\"},\"collectRewards()\":{\"notice\":\"Collect rewards for the caller\"},\"constructor\":{\"notice\":\"Constructor\"},\"deposit(uint256)\":{\"notice\":\"Deposit USDT to the positionManager\"},\"distributeRewards(address,uint256,uint256)\":{\"notice\":\"Distribute the rewards accumulated by the PositionManager contract\"},\"pool()\":{\"notice\":\"Pool of USDT/WNative\"},\"sharesContract()\":{\"notice\":\"PositionManager contract\"},\"usdt()\":{\"notice\":\"USDT address\"},\"usersSet()\":{\"notice\":\"Get the users set\"},\"usersTotalBalances()\":{\"notice\":\"Total amount of USDT in the contract owned by the users\"},\"withdraw()\":{\"notice\":\"Withdraw Funds from the positionManager\"},\"wnative()\":{\"notice\":\"WNative address\"}},\"notice\":\"Distributes the rewards of the PositionManager contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PositionManagerDistributor.sol\":\"PositionManagerDistributor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aperture_finance/uni-v3-lib/src/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"solady/src/utils/FixedPointMathLib.sol\\\";\\n\\n/// @title Contains 512-bit math functions\\n/// @author Aperture Finance\\n/// @author Modified from Uniswap (https://github.com/uniswap/v3-core/blob/main/contracts/libraries/FullMath.sol)\\n/// @author Credit to Solady (https://github.com/vectorized/solady/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @dev The full precision multiply-divide operation failed, either due\\n    /// to the result being larger than 256 bits, or a division by a zero.\\n    error FullMulDivFailed();\\n\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256) {\\n        return FixedPointMathLib.fullMulDiv(a, b, denominator);\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256) {\\n        return FixedPointMathLib.fullMulDivUp(a, b, denominator);\\n    }\\n\\n    /// @notice Calculates a * b / 2^96 with full precision.\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @return result The 256-bit result\\n    function mulDivQ96(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            // 512-bit multiply `[prod1 prod0] = a * b`.\\n            // Compute the product mod `2**256` and mod `2**256 - 1`\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that `product = prod1 * 2**256 + prod0`.\\n\\n            // Least significant 256 bits of the product.\\n            let prod0 := mul(a, b)\\n            let mm := mulmod(a, b, not(0))\\n            // Most significant 256 bits of the product.\\n            let prod1 := sub(mm, add(prod0, lt(mm, prod0)))\\n\\n            // Make sure the result is less than `2**256`.\\n            if iszero(gt(0x1000000000000000000000000, prod1)) {\\n                // Store the function selector of `FullMulDivFailed()`.\\n                mstore(0x00, 0xae47f702)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // Divide [prod1 prod0] by 2^96.\\n            result := or(shr(96, prod0), shl(160, prod1))\\n        }\\n    }\\n\\n    /// @notice Calculates a * b / 2^128 with full precision.\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @return result The 256-bit result\\n    function mulDivQ128(uint256 a, uint256 b) internal pure returns (uint256 result) {\\n        assembly (\\\"memory-safe\\\") {\\n            // 512-bit multiply `[prod1 prod0] = a * b`.\\n            // Compute the product mod `2**256` and mod `2**256 - 1`\\n            // then use the Chinese Remainder Theorem to reconstruct\\n            // the 512 bit result. The result is stored in two 256\\n            // variables such that `product = prod1 * 2**256 + prod0`.\\n\\n            // Least significant 256 bits of the product.\\n            let prod0 := mul(a, b)\\n            let mm := mulmod(a, b, not(0))\\n            // Most significant 256 bits of the product.\\n            let prod1 := sub(mm, add(prod0, lt(mm, prod0)))\\n\\n            // Make sure the result is less than `2**256`.\\n            if iszero(gt(0x100000000000000000000000000000000, prod1)) {\\n                // Store the function selector of `FullMulDivFailed()`.\\n                mstore(0x00, 0xae47f702)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // Divide [prod1 prod0] by 2^128.\\n            result := or(shr(128, prod0), shl(128, prod1))\\n        }\\n    }\\n\\n    /// @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        return FixedPointMathLib.sqrt(x);\\n    }\\n}\\n\",\"keccak256\":\"0x5436f4d7429f523d374e73f0a79f56873362e8c1400112eac79b67f9a570f69d\",\"license\":\"MIT\"},\"@aperture_finance/uni-v3-lib/src/LiquidityAmounts.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.8.4;\\n\\nimport \\\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\\\";\\nimport \\\"./FullMath.sol\\\";\\nimport \\\"./SafeCast.sol\\\";\\nimport \\\"./TernaryLib.sol\\\";\\nimport \\\"./UnsafeMath.sol\\\";\\n\\n/// @title Liquidity amount functions\\n/// @author Aperture Finance\\n/// @author Modified from Uniswap (https://github.com/uniswap/v3-periphery/blob/main/contracts/libraries/LiquidityAmounts.sol)\\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\\nlibrary LiquidityAmounts {\\n    using UnsafeMath for *;\\n    using SafeCast for uint256;\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount0 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount0(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0\\n    ) internal pure returns (uint128 liquidity) {\\n        uint256 intermediate = FullMath.mulDivQ96(sqrtRatioAX96, sqrtRatioBX96);\\n        return FullMath.mulDiv(amount0, intermediate, TernaryLib.absDiffU160(sqrtRatioAX96, sqrtRatioBX96)).toUint128();\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))\\n    /// @param sqrtRatioAX96 A sqrt price representing the lower tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the upper tick boundary\\n    /// @param amount0 The amount0 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount0Sorted(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0\\n    ) internal pure returns (uint128 liquidity) {\\n        unchecked {\\n            uint256 intermediate = FullMath.mulDivQ96(sqrtRatioAX96, sqrtRatioBX96);\\n            return FullMath.mulDiv(amount0, intermediate, sqrtRatioBX96 - sqrtRatioAX96).toUint128();\\n        }\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount1 The amount1 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount1(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        return\\n            FullMath\\n                .mulDiv(amount1, FixedPoint96.Q96, TernaryLib.absDiffU160(sqrtRatioAX96, sqrtRatioBX96))\\n                .toUint128();\\n    }\\n\\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\\n    /// @param sqrtRatioAX96 A sqrt price representing the lower tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the upper tick boundary\\n    /// @param amount1 The amount1 being sent in\\n    /// @return liquidity The amount of returned liquidity\\n    function getLiquidityForAmount1Sorted(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        unchecked {\\n            return FullMath.mulDiv(amount1, FixedPoint96.Q96, sqrtRatioBX96 - sqrtRatioAX96).toUint128();\\n        }\\n    }\\n\\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param amount0 The amount of token0 being sent in\\n    /// @param amount1 The amount of token1 being sent in\\n    /// @return liquidity The maximum amount of liquidity received\\n    function getLiquidityForAmounts(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) internal pure returns (uint128 liquidity) {\\n        (sqrtRatioAX96, sqrtRatioBX96) = TernaryLib.sort2U160(sqrtRatioAX96, sqrtRatioBX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            liquidity = getLiquidityForAmount0Sorted(sqrtRatioAX96, sqrtRatioBX96, amount0);\\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\\n            uint128 liquidity0 = getLiquidityForAmount0Sorted(sqrtRatioX96, sqrtRatioBX96, amount0);\\n            uint128 liquidity1 = getLiquidityForAmount1Sorted(sqrtRatioAX96, sqrtRatioX96, amount1);\\n            // liquidity = min(liquidity0, liquidity1);\\n            assembly {\\n                liquidity := xor(liquidity0, mul(xor(liquidity0, liquidity1), lt(liquidity1, liquidity0)))\\n            }\\n        } else {\\n            liquidity = getLiquidityForAmount1Sorted(sqrtRatioAX96, sqrtRatioBX96, amount1);\\n        }\\n    }\\n\\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    function getAmount0ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0) {\\n        unchecked {\\n            (sqrtRatioAX96, sqrtRatioBX96) = TernaryLib.sort2U160(sqrtRatioAX96, sqrtRatioBX96);\\n            return\\n                FullMath\\n                    .mulDiv(uint256(liquidity) << FixedPoint96.RESOLUTION, sqrtRatioBX96 - sqrtRatioAX96, sqrtRatioBX96)\\n                    .div(sqrtRatioAX96);\\n        }\\n    }\\n\\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the lower tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the upper tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    function getAmount0ForLiquiditySorted(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0) {\\n        unchecked {\\n            return\\n                FullMath\\n                    .mulDiv(uint256(liquidity) << FixedPoint96.RESOLUTION, sqrtRatioBX96 - sqrtRatioAX96, sqrtRatioBX96)\\n                    .div(sqrtRatioAX96);\\n        }\\n    }\\n\\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount1 The amount of token1\\n    function getAmount1ForLiquidity(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount1) {\\n        return FullMath.mulDivQ96(liquidity, TernaryLib.absDiffU160(sqrtRatioAX96, sqrtRatioBX96));\\n    }\\n\\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\\n    /// @param sqrtRatioAX96 A sqrt price representing the lower tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the upper tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount1 The amount of token1\\n    function getAmount1ForLiquiditySorted(\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount1) {\\n        unchecked {\\n            return FullMath.mulDivQ96(liquidity, sqrtRatioBX96 - sqrtRatioAX96);\\n        }\\n    }\\n\\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\\n    /// pool prices and the prices at the tick boundaries\\n    /// @param sqrtRatioX96 A sqrt price representing the current pool prices\\n    /// @param sqrtRatioAX96 A sqrt price representing the first tick boundary\\n    /// @param sqrtRatioBX96 A sqrt price representing the second tick boundary\\n    /// @param liquidity The liquidity being valued\\n    /// @return amount0 The amount of token0\\n    /// @return amount1 The amount of token1\\n    function getAmountsForLiquidity(\\n        uint160 sqrtRatioX96,\\n        uint160 sqrtRatioAX96,\\n        uint160 sqrtRatioBX96,\\n        uint128 liquidity\\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\\n        (sqrtRatioAX96, sqrtRatioBX96) = TernaryLib.sort2U160(sqrtRatioAX96, sqrtRatioBX96);\\n\\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\\n            amount0 = getAmount0ForLiquiditySorted(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        } else if (sqrtRatioX96 <= sqrtRatioBX96) {\\n            amount0 = getAmount0ForLiquiditySorted(sqrtRatioX96, sqrtRatioBX96, liquidity);\\n            amount1 = getAmount1ForLiquiditySorted(sqrtRatioAX96, sqrtRatioX96, liquidity);\\n        } else {\\n            amount1 = getAmount1ForLiquiditySorted(sqrtRatioAX96, sqrtRatioBX96, liquidity);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3fd01c0cf966b044d103f98e39defc894539518939570463208ba243d342719\",\"license\":\"GPL-2.0-or-later\"},\"@aperture_finance/uni-v3-lib/src/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n/// @title Safe casting methods\\n/// @author Aperture Finance\\n/// @author Modified from Uniswap (https://github.com/uniswap/v3-core/blob/main/contracts/libraries/SafeCast.sol)\\n/// @notice Contains methods for safely casting between types\\nlibrary SafeCast {\\n    /// @notice Cast a uint256 to a uint160, revert on overflow\\n    /// @param x The uint256 to be downcasted\\n    /// @return The downcasted integer, now type uint160\\n    function toUint160(uint256 x) internal pure returns (uint160) {\\n        if (x >= 1 << 160) revert();\\n        return uint160(x);\\n    }\\n\\n    /// @notice Cast a uint256 to a uint128, revert on overflow\\n    /// @param x The uint256 to be downcasted\\n    /// @return The downcasted integer, now type uint128\\n    function toUint128(uint256 x) internal pure returns (uint128) {\\n        if (x >= 1 << 128) revert();\\n        return uint128(x);\\n    }\\n\\n    /// @notice Cast a int256 to a int128, revert on overflow or underflow\\n    /// @param x The int256 to be downcasted\\n    /// @return The downcasted integer, now type int128\\n    function toInt128(int256 x) internal pure returns (int128) {\\n        unchecked {\\n            if (((1 << 127) + uint256(x)) >> 128 == uint256(0)) return int128(x);\\n            revert();\\n        }\\n    }\\n\\n    /// @notice Cast a uint256 to a int256, revert on overflow\\n    /// @param x The uint256 to be casted\\n    /// @return The casted integer, now type int256\\n    function toInt256(uint256 x) internal pure returns (int256) {\\n        if (int256(x) >= 0) return int256(x);\\n        revert();\\n    }\\n\\n    /// @notice Cast a uint256 to a int128, revert on overflow\\n    /// @param x The uint256 to be downcasted\\n    /// @return The downcasted integer, now type int128\\n    function toInt128(uint256 x) internal pure returns (int128) {\\n        if (x >= 1 << 127) revert();\\n        return int128(int256(x));\\n    }\\n}\\n\",\"keccak256\":\"0xaced661e3faa647f04497b93dedeeba07c9c74285e8f28c3d530fd4f81de96c8\",\"license\":\"MIT\"},\"@aperture_finance/uni-v3-lib/src/TernaryLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n/// @title Library for efficient ternary operations\\n/// @author Aperture Finance\\nlibrary TernaryLib {\\n    /// @notice Equivalent to the ternary operator: `condition ? a : b`\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256 res) {\\n        assembly {\\n            res := xor(b, mul(xor(a, b), condition))\\n        }\\n    }\\n\\n    /// @notice Equivalent to the ternary operator: `condition ? a : b`\\n    function ternary(bool condition, address a, address b) internal pure returns (address res) {\\n        assembly {\\n            res := xor(b, mul(xor(a, b), condition))\\n        }\\n    }\\n\\n    /// @notice Equivalent to: `uint256(x < 0 ? -x : x)`\\n    function abs(int256 x) internal pure returns (uint256 y) {\\n        assembly {\\n            // mask = 0 if x >= 0 else -1\\n            let mask := sar(255, x)\\n            // If x >= 0, |x| = x = 0 ^ x\\n            // If x < 0, |x| = ~~|x| = ~(-|x| - 1) = ~(x - 1) = -1 ^ (x - 1)\\n            // Either case, |x| = mask ^ (x + mask)\\n            y := xor(mask, add(mask, x))\\n        }\\n    }\\n\\n    /// @notice Equivalent to: `a > b ? a - b : b - a`\\n    function absDiff(uint256 a, uint256 b) internal pure returns (uint256 res) {\\n        assembly {\\n            // The diff between two `uint256` may overflow `int256`\\n            let diff0 := sub(a, b)\\n            let diff1 := sub(b, a)\\n            res := xor(diff1, mul(xor(diff0, diff1), gt(a, b)))\\n        }\\n    }\\n\\n    /// @notice Equivalent to: `a > b ? a - b : b - a`\\n    function absDiffU160(uint160 a, uint160 b) internal pure returns (uint256 res) {\\n        assembly {\\n            let diff := sub(a, b)\\n            let mask := sar(255, diff)\\n            res := xor(mask, add(mask, diff))\\n        }\\n    }\\n\\n    /// @notice Equivalent to: `a < b ? a : b`\\n    function min(uint256 a, uint256 b) internal pure returns (uint256 res) {\\n        assembly {\\n            res := xor(b, mul(xor(a, b), lt(a, b)))\\n        }\\n    }\\n\\n    /// @notice Equivalent to: `a > b ? a : b`\\n    function max(uint256 a, uint256 b) internal pure returns (uint256 res) {\\n        assembly {\\n            res := xor(b, mul(xor(a, b), gt(a, b)))\\n        }\\n    }\\n\\n    /// @notice Equivalent to: `condition ? (b, a) : (a, b)`\\n    function switchIf(bool condition, uint256 a, uint256 b) internal pure returns (uint256, uint256) {\\n        assembly {\\n            let diff := mul(xor(a, b), condition)\\n            a := xor(a, diff)\\n            b := xor(b, diff)\\n        }\\n        return (a, b);\\n    }\\n\\n    /// @notice Equivalent to: `condition ? (b, a) : (a, b)`\\n    function switchIf(bool condition, address a, address b) internal pure returns (address, address) {\\n        assembly {\\n            let diff := mul(xor(a, b), condition)\\n            a := xor(a, diff)\\n            b := xor(b, diff)\\n        }\\n        return (a, b);\\n    }\\n\\n    /// @notice Sorts two addresses and returns them in ascending order\\n    function sort2(address a, address b) internal pure returns (address, address) {\\n        assembly {\\n            let diff := mul(xor(a, b), lt(b, a))\\n            a := xor(a, diff)\\n            b := xor(b, diff)\\n        }\\n        return (a, b);\\n    }\\n\\n    /// @notice Sorts two uint256s and returns them in ascending order\\n    function sort2(uint256 a, uint256 b) internal pure returns (uint256, uint256) {\\n        assembly {\\n            let diff := mul(xor(a, b), lt(b, a))\\n            a := xor(a, diff)\\n            b := xor(b, diff)\\n        }\\n        return (a, b);\\n    }\\n\\n    /// @notice Sorts two uint160s and returns them in ascending order\\n    function sort2U160(uint160 a, uint160 b) internal pure returns (uint160, uint160) {\\n        assembly {\\n            let diff := mul(xor(a, b), lt(b, a))\\n            a := xor(a, diff)\\n            b := xor(b, diff)\\n        }\\n        return (a, b);\\n    }\\n}\\n\",\"keccak256\":\"0xff42c2b80e517af4357df837ccdd1f417e4773efa5b7f102ee8e43946fd0c684\",\"license\":\"MIT\"},\"@aperture_finance/uni-v3-lib/src/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport \\\"./TernaryLib.sol\\\";\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @author Aperture Finance\\n/// @author Modified from Uniswap (https://github.com/uniswap/v3-core/blob/main/contracts/libraries/TickMath.sol)\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = 887272;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n    /// @dev A threshold used for optimized bounds check, equals `MAX_SQRT_RATIO - MIN_SQRT_RATIO - 1`\\n    uint160 internal constant MAX_SQRT_RATIO_MINUS_MIN_SQRT_RATIO_MINUS_ONE =\\n        1461446703485210103287273052203988822378723970342 - 4295128739 - 1;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        unchecked {\\n            int256 tick256;\\n            assembly {\\n                tick256 := tick\\n            }\\n            uint256 absTick = TernaryLib.abs(tick256);\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Equivalent: if (absTick > MAX_TICK) revert(\\\"T\\\");\\n                if gt(absTick, MAX_TICK) {\\n                    // selector \\\"Error(string)\\\", [0x1c, 0x20)\\n                    mstore(0, 0x08c379a0)\\n                    // abi encoding offset\\n                    mstore(0x20, 0x20)\\n                    // reason string length 1 and 'T', [0x5f, 0x61)\\n                    mstore(0x41, 0x0154)\\n                    // 4 byte selector + 32 byte offset + 32 byte length + 1 byte reason\\n                    revert(0x1c, 0x45)\\n                }\\n            }\\n\\n            // Equivalent to:\\n            //     ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n            //     or ratio = int(2**128 / sqrt(1.0001)) if (absTick & 0x1) else 1 << 128\\n            uint256 ratio;\\n            assembly {\\n                ratio := xor(shl(128, 1), mul(xor(shl(128, 1), 0xfffcb933bd6fad37aa2d162d1a594001), and(absTick, 0x1)))\\n            }\\n            // Iterate through 1th to 19th bit of absTick because MAX_TICK < 2**20\\n            // Equivalent to:\\n            //      for i in range(1, 20):\\n            //          if absTick & 2 ** i:\\n            //              ratio = ratio * (2 ** 128 / 1.0001 ** (2 ** (i - 1))) / 2 ** 128\\n            if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n            if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n            if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n            if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n            if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n            if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n            if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n            if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n            if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n            if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n            if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n            if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n            if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n            if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n            if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n            if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n            if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n            if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n            if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n            assembly {\\n                // if (tick > 0) ratio = type(uint256).max / ratio;\\n                if sgt(tick, 0) {\\n                    ratio := div(not(0), ratio)\\n                }\\n                // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n                // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n                // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n                sqrtPriceX96 := shr(32, add(ratio, sub(shl(32, 1), 1)))\\n            }\\n        }\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // Equivalent: if (sqrtPriceX96 < MIN_SQRT_RATIO || sqrtPriceX96 >= MAX_SQRT_RATIO) revert(\\\"R\\\");\\n        // second inequality must be >= because the price can never reach the price at the max tick\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // if sqrtPriceX96 < MIN_SQRT_RATIO, the `sub` underflows and `gt` is true\\n            // if sqrtPriceX96 >= MAX_SQRT_RATIO, sqrtPriceX96 - MIN_SQRT_RATIO > MAX_SQRT_RATIO - MIN_SQRT_RATIO - 1\\n            if gt(sub(sqrtPriceX96, MIN_SQRT_RATIO), MAX_SQRT_RATIO_MINUS_MIN_SQRT_RATIO_MINUS_ONE) {\\n                // selector \\\"Error(string)\\\", [0x1c, 0x20)\\n                mstore(0, 0x08c379a0)\\n                // abi encoding offset\\n                mstore(0x20, 0x20)\\n                // reason string length 1 and 'R', [0x5f, 0x61)\\n                mstore(0x41, 0x0152)\\n                // 4 byte selector + 32 byte offset + 32 byte length + 1 byte reason\\n                revert(0x1c, 0x45)\\n            }\\n        }\\n\\n        // Find the most significant bit of `sqrtPriceX96`, 160 > msb >= 32.\\n        uint8 msb;\\n        assembly {\\n            let x := sqrtPriceX96\\n            msb := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            msb := or(msb, shl(6, lt(0xffffffffffffffff, shr(msb, x))))\\n            msb := or(msb, shl(5, lt(0xffffffff, shr(msb, x))))\\n            msb := or(msb, shl(4, lt(0xffff, shr(msb, x))))\\n            msb := or(msb, shl(3, lt(0xff, shr(msb, x))))\\n            msb := or(\\n                msb,\\n                byte(\\n                    and(0x1f, shr(shr(msb, x), 0x8421084210842108cc6318c6db6d54be)),\\n                    0x0706060506020504060203020504030106050205030304010505030400000000\\n                )\\n            )\\n        }\\n\\n        // 2**(msb - 95) > sqrtPrice >= 2**(msb - 96)\\n        // the integer part of log_2(sqrtPrice) * 2**64 = (msb - 96) << 64, 8.64 number\\n        int256 log_2X64;\\n        assembly {\\n            log_2X64 := shl(64, sub(msb, 96))\\n\\n            // Get the first 128 significant figures of `sqrtPriceX96`.\\n            // r = sqrtPriceX96 / 2**(msb - 127), where 2**128 > r >= 2**127\\n            // sqrtPrice = 2**(msb - 96) * r / 2**127, in floating point math\\n            // Shift left first because 160 > msb >= 32. If we shift right first, we'll lose precision.\\n            let r := shr(sub(msb, 31), shl(96, sqrtPriceX96))\\n\\n            // Approximate `log_2X64` to 14 binary digits after decimal\\n            // log_2X64 = (msb - 96) * 2**64 + f_0 * 2**63 + f_1 * 2**62 + ......\\n            // sqrtPrice**2 = 2**(2 * (msb - 96)) * (r / 2**127)**2 = 2**(2 * log_2X64 / 2**64) = 2**(2 * (msb - 96) + f_0)\\n            // 2**f_0 = (r / 2**127)**2 = r**2 / 2**255 * 2\\n            // f_0 = 1 if (r**2 >= 2**255) else 0\\n            // sqrtPrice**2 = 2**(2 * (msb - 96) + f_0) * r**2 / 2**(254 + f_0) = 2**(2 * (msb - 96) + f_0) * r' / 2**127\\n            // r' = r**2 / 2**(127 + f_0)\\n            // sqrtPrice**4 = 2**(4 * (msb - 96) + 2 * f_0) * (r' / 2**127)**2\\n            //     = 2**(4 * log_2X64 / 2**64) = 2**(4 * (msb - 96) + 2 * f_0 + f_1)\\n            // 2**(f_1) = (r' / 2**127)**2\\n            // f_1 = 1 if (r'**2 >= 2**255) else 0\\n\\n            // Check whether r >= sqrt(2) * 2**127\\n            // 2**256 > r**2 >= 2**254\\n            let square := mul(r, r)\\n            // f = (r**2 >= 2**255)\\n            let f := slt(square, 0)\\n            // r = r**2 >> 128 if r**2 >= 2**255 else r**2 >> 127\\n            r := shr(127, shr(f, square))\\n            log_2X64 := or(shl(63, f), log_2X64)\\n\\n            square := mul(r, r)\\n            f := slt(square, 0)\\n            r := shr(127, shr(f, square))\\n            log_2X64 := or(shl(62, f), log_2X64)\\n\\n            square := mul(r, r)\\n            f := slt(square, 0)\\n            r := shr(127, shr(f, square))\\n            log_2X64 := or(shl(61, f), log_2X64)\\n\\n            square := mul(r, r)\\n            f := slt(square, 0)\\n            r := shr(127, shr(f, square))\\n            log_2X64 := or(shl(60, f), log_2X64)\\n\\n            square := mul(r, r)\\n            f := slt(square, 0)\\n            r := shr(127, shr(f, square))\\n            log_2X64 := or(shl(59, f), log_2X64)\\n\\n            square := mul(r, r)\\n            f := slt(square, 0)\\n            r := shr(127, shr(f, square))\\n            log_2X64 := or(shl(58, f), log_2X64)\\n\\n            square := mul(r, r)\\n            f := slt(square, 0)\\n            r := shr(127, shr(f, square))\\n            log_2X64 := or(shl(57, f), log_2X64)\\n\\n            square := mul(r, r)\\n            f := slt(square, 0)\\n            r := shr(127, shr(f, square))\\n            log_2X64 := or(shl(56, f), log_2X64)\\n\\n            square := mul(r, r)\\n            f := slt(square, 0)\\n            r := shr(127, shr(f, square))\\n            log_2X64 := or(shl(55, f), log_2X64)\\n\\n            square := mul(r, r)\\n            f := slt(square, 0)\\n            r := shr(127, shr(f, square))\\n            log_2X64 := or(shl(54, f), log_2X64)\\n\\n            square := mul(r, r)\\n            f := slt(square, 0)\\n            r := shr(127, shr(f, square))\\n            log_2X64 := or(shl(53, f), log_2X64)\\n\\n            square := mul(r, r)\\n            f := slt(square, 0)\\n            r := shr(127, shr(f, square))\\n            log_2X64 := or(shl(52, f), log_2X64)\\n\\n            square := mul(r, r)\\n            f := slt(square, 0)\\n            r := shr(127, shr(f, square))\\n            log_2X64 := or(shl(51, f), log_2X64)\\n\\n            log_2X64 := or(shl(50, slt(mul(r, r), 0)), log_2X64)\\n        }\\n\\n        // sqrtPrice = sqrt(1.0001^tick)\\n        // tick = log_{sqrt(1.0001)}(sqrtPrice) = log_2(sqrtPrice) / log_2(sqrt(1.0001))\\n        // 2**64 / log_2(sqrt(1.0001)) = 255738958999603826347141\\n        int24 tickLow;\\n        int24 tickHi;\\n        assembly {\\n            let log_sqrt10001 := mul(log_2X64, 255738958999603826347141) // 128.128 number\\n            tickLow := sar(128, sub(log_sqrt10001, 3402992956809132418596140100660247210))\\n            tickHi := sar(128, add(log_sqrt10001, 291339464771989622907027621153398088495))\\n        }\\n\\n        // Equivalent: tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n        if (tickLow != tickHi) {\\n            uint160 sqrtRatioAtTickHi = getSqrtRatioAtTick(tickHi);\\n            assembly {\\n                tick := sub(tickHi, gt(sqrtRatioAtTickHi, sqrtPriceX96))\\n            }\\n        } else {\\n            tick = tickHi;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f4722068ca53b4bf3ea25db88ced531f9405384b801bfa2fa6028b398b026ba\",\"license\":\"GPL-2.0-or-later\"},\"@aperture_finance/uni-v3-lib/src/UnsafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math functions that do not check inputs or outputs\\n/// @author Aperture Finance\\n/// @author Modified from Uniswap (https://github.com/uniswap/v3-core/blob/main/contracts/libraries/UnsafeMath.sol)\\n/// @notice Contains methods that perform common math functions but do not do any overflow or underflow checks\\nlibrary UnsafeMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(x, y)\\n        }\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := sub(x, y)\\n        }\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := mul(x, y)\\n        }\\n    }\\n\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := div(x, y)\\n        }\\n    }\\n\\n    /// @notice Returns ceil(x / y)\\n    /// @dev division by 0 has unspecified behavior, and must be checked externally\\n    /// @param x The dividend\\n    /// @param y The divisor\\n    /// @return z The quotient, ceil(x / y)\\n    function divRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        assembly {\\n            z := add(div(x, y), gt(mod(x, y), 0))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x206b9736420bae4e18e0f3a9f78395cab0638a004433d20d5343a4159b2d0796\",\"license\":\"GPL-2.0-or-later\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IPancakeV3PoolImmutables.sol';\\nimport './pool/IPancakeV3PoolState.sol';\\nimport './pool/IPancakeV3PoolDerivedState.sol';\\nimport './pool/IPancakeV3PoolActions.sol';\\nimport './pool/IPancakeV3PoolOwnerActions.sol';\\nimport './pool/IPancakeV3PoolEvents.sol';\\n\\n/// @title The interface for a PancakeSwap V3 Pool\\n/// @notice A PancakeSwap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IPancakeV3Pool is\\n    IPancakeV3PoolImmutables,\\n    IPancakeV3PoolState,\\n    IPancakeV3PoolDerivedState,\\n    IPancakeV3PoolActions,\\n    IPancakeV3PoolOwnerActions,\\n    IPancakeV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0x4f22208838b7b85d2d48e9a92a0cee1e5bf5f12fe0f2f5cc521ab1adabb68fbb\",\"license\":\"GPL-2.0-or-later\"},\"@pancakeswap/v3-core/contracts/interfaces/callback/IPancakeV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IPancakeV3PoolActions#swap\\n/// @notice Any contract that calls IPancakeV3PoolActions#swap must implement this interface\\ninterface IPancakeV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IPancakeV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a PancakeV3Pool deployed by the canonical PancakeV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IPancakeV3PoolActions#swap call\\n    function pancakeV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x247e5e6d9c311aa37350fa8298595c83789ac3ba2e2cde3cc73769e1b21a93f8\",\"license\":\"GPL-2.0-or-later\"},\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IPancakeV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IPancakeV3MintCallback#pancakeV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IPancakeV3SwapCallback#pancakeV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IPancakeV3FlashCallback#pancakeV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x78ed1c130111169f443c55618ff2d290ce0630b1d016cdeda3a66e12816041f6\",\"license\":\"GPL-2.0-or-later\"},\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IPancakeV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0x45a9f30f562b5d0d55b311149c32df5cbcf0c7cfcb72aff2637a29794b06d4b6\",\"license\":\"GPL-2.0-or-later\"},\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IPancakeV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    /// @param protocolFeesToken0 The protocol fee of token0 in the swap\\n    /// @param protocolFeesToken1 The protocol fee of token1 in the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick,\\n        uint128 protocolFeesToken0,\\n        uint128 protocolFeesToken1\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(\\n        uint32 feeProtocol0Old,\\n        uint32 feeProtocol1Old,\\n        uint32 feeProtocol0New,\\n        uint32 feeProtocol1New\\n    );\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0xab6ac5bd9ceadd20e3b60bb079489a2942c60f2697a6e145c585ee49b281534c\",\"license\":\"GPL-2.0-or-later\"},\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IPancakeV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IPancakeV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0x8cde7ad64b4dced2fa40e91e3c8ffd0eaaf86954c65a1c0f7abc35f1af3a89d0\",\"license\":\"GPL-2.0-or-later\"},\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IPancakeV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint32 feeProtocol0, uint32 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Set the LM pool to enable liquidity mining\\n    function setLmPool(address lmPool) external;\\n}\\n\",\"keccak256\":\"0x5c522018f94c194608fd0f3f6bb1c7373d53496f5b6cb5e916b7a8d61fc7caf1\",\"license\":\"GPL-2.0-or-later\"},\"@pancakeswap/v3-core/contracts/interfaces/pool/IPancakeV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IPancakeV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint32 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0xbf4a0b7b13de3cb73722a74cfee8b34fa250855373cd17e54a093f9054efbc61\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"contracts/FeeManagement.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {FullMath} from \\\"@aperture_finance/uni-v3-lib/src/FullMath.sol\\\";\\n\\n/**\\n * @title FeeManagement\\n * @dev Contract that charges a specific amount of fee (in USDT) on deposit\\n * NOTE: If the deposit amount is too small, rounding errors may occur\\n */\\ncontract FeeManagement {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Maximum percentage value with 4 decimals\\n    uint256 public constant MAX_PERCENTAGE = 1_000_000; // 100%\\n\\n    /// @notice Maximum fee percentage value with 4 decimals\\n    uint256 public constant MAX_FEE_PERCENTAGE = 100_000; // 10%\\n\\n    /// @dev Error thrown when an invalid input is provided\\n    error InvalidEntry();\\n\\n    /// @notice Event emitted when the fee is changed\\n    event FeeChanged(uint256 depositFee, address feeReceiver);\\n\\n    /// @notice Event emitted when a fee is charged\\n    event FeeCharged(uint256 fee);\\n\\n    /// @notice Address of the USDT token\\n    IERC20 public immutable usdt;\\n\\n    /// @notice Fee to be charged on deposit in percentage with 4 decimals\\n    uint256 public depositFee;\\n\\n    /// @notice Address to receive the fee\\n    address public feeReceiver;\\n\\n    /// @dev Should be called by the derived contract with access control\\n    function _setFee(uint256 depositFeePercentage, address feeReceiverAddress) internal {\\n        if (depositFeePercentage > MAX_FEE_PERCENTAGE) revert InvalidEntry();\\n\\n        depositFee = depositFeePercentage;\\n        feeReceiver = feeReceiverAddress;\\n\\n        emit FeeChanged(depositFeePercentage, feeReceiverAddress);\\n    }\\n\\n    function _chargeDepositFee(uint256 amount) internal returns (uint256) {\\n        uint256 fee = FullMath.mulDiv(amount, depositFee, MAX_PERCENTAGE);\\n\\n        _chargeFee(fee);\\n\\n        return amount - fee;\\n    }\\n\\n    function _chargeFee(uint256 fee) private {\\n        if (fee > 0) {\\n            usdt.safeTransfer(feeReceiver, fee);\\n\\n            emit FeeCharged(fee);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf3bfa56b22f4b0433939c2c9d7ce603e964ee4a1b3505740cd008cd2538ff47b\",\"license\":\"MIT\"},\"contracts/PositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {ERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {LiquidityAmounts} from \\\"@aperture_finance/uni-v3-lib/src/LiquidityAmounts.sol\\\";\\nimport {TickMath} from \\\"@aperture_finance/uni-v3-lib/src/TickMath.sol\\\";\\nimport {FullMath} from \\\"@aperture_finance/uni-v3-lib/src/FullMath.sol\\\";\\nimport {IPancakeV3SwapCallback} from \\\"@pancakeswap/v3-core/contracts/interfaces/callback/IPancakeV3SwapCallback.sol\\\";\\nimport {IPancakeV3Pool} from \\\"@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Pool.sol\\\";\\n\\nimport {IPositionManager} from \\\"./interfaces/IPositionManager.sol\\\";\\nimport {IPositionManagerDistributor} from \\\"./interfaces/IPositionManagerDistributor.sol\\\";\\nimport {FeeManagement} from \\\"./FeeManagement.sol\\\";\\n\\n/**\\n * @title PositionManager\\n * @dev Contract that allows users to deposit and withdraw from a position strategy in PancakeSwap managed by a manager\\n *      NOTE: Users deposit USDT and receive shares in return\\n *            Users withdraw shares and receive USDT or Token0 and Token1 in return\\n *\\n *            The operator can make the contract open, close and update a position with the funds deposited by the users\\n *\\n *            This contract involves two receivers, the deposit `feeReceiver` from the FeeManagement contract and the rewards `receiverAddress`\\n */\\ncontract PositionManager is IPositionManager, FeeManagement, IPancakeV3SwapCallback, AccessControl, ReentrancyGuard, ERC20 {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice Precision used in the contract\\n    uint256 public constant PRECISION = 1e36;\\n\\n    /// @dev Precision used in Chainlink price\\n    uint256 private constant CHAINLINK_PRECISION = 1e8;\\n\\n    /// @dev Maximum value for uint128\\n    uint128 private constant MAX_UINT128 = type(uint128).max;\\n\\n    /// @dev Time interval to check the Chainlink price\\n    uint256 private constant TWENTY_MINUTES = 20 minutes;\\n\\n    /// @notice Manager role\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"Position_Manager_Role\\\");\\n\\n    /// @dev Address of the data feed used to get the token1 price in USD\\n    AggregatorV3Interface private immutable _dataFeed;\\n\\n    /// @dev Address of the main PancakeSwap V3 pool (where the position is)\\n    IPancakeV3Pool private immutable _pool;\\n\\n    /// @dev Address of the pool to swap USDT to token0 and vice versa (zero if not necessary)\\n    IPancakeV3Pool private immutable _pool0;\\n\\n    /// @dev Boolean to indicate if the pool is token0/USDT (true) or USDT/token0 (false)\\n    bool private immutable _pool0Direction;\\n\\n    /// @dev Address of the pool to swap USDT to token1 and vice versa (zero if not necessary)\\n    IPancakeV3Pool private immutable _pool1;\\n\\n    /// @dev Boolean to indicate if the pool is token1/USDT (true) or USDT/token1 (false)\\n    bool private immutable _pool1Direction;\\n\\n    /// @dev Factory address\\n    address private immutable _factory;\\n\\n    /// @dev Token0 of the pool\\n    IERC20 private immutable _token0;\\n\\n    /// @dev Token1 of the pool\\n    IERC20 private immutable _token1;\\n\\n    /// @notice Address of the receiver of the fees\\n    address public receiverAddress;\\n\\n    /// @notice Percentage of the funds destined to the receiver\\n    uint256 public receiverPercentage;\\n\\n    /// @dev Max slippage percentage allowed in swaps with 4 decimals\\n    uint256 private _slippage = 10_000; // 1%\\n\\n    /// @notice Minimum USDT deposit amount\\n    uint256 public minDepositAmount = 10e18; // 10 USDT\\n\\n    /// @dev Lower tick of the position\\n    int24 private _tickLower;\\n\\n    /// @dev Upper tick of the position\\n    int24 private _tickUpper;\\n\\n    /// @dev Bool switch to prevent reentrancy on the mint callback\\n    bool private _minting;\\n\\n    /// @dev Modifier to check if the caller is the factory\\n    modifier onlyFactory() {\\n        if (msg.sender != _factory) revert InvalidEntry();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructor\\n     * @param dataFeedAddress Address of the data feed used to get the token1 price in USD\\n     * @param poolAddress Address of the main PancakeSwap V3 pool\\n     * @param pool0Address Address of the pool to swap USDT to token0 (zero if token0 is already USDT)\\n     * @param pool1Address Address of the pool to swap USDT to token1 (zero if token1 is already USDT)\\n     * @param usdtAddress Address of the USDT token\\n     * @param receiverAddress_ Address of the receiver of the fees\\n     * @param receiverFeePercentage_ Percentage of the funds destined to the receiver\\n     */\\n    constructor(\\n        address dataFeedAddress,\\n        address poolAddress,\\n        address pool0Address,\\n        address pool1Address,\\n        address usdtAddress,\\n        address receiverAddress_,\\n        uint256 receiverFeePercentage_\\n    ) ERC20(\\\"PositionManager\\\", \\\"PM\\\") {\\n        if (\\n            dataFeedAddress == address(0) ||\\n            poolAddress == address(0) ||\\n            usdtAddress == address(0) ||\\n            receiverAddress_ == address(0) ||\\n            receiverFeePercentage_ > MAX_PERCENTAGE ||\\n            receiverFeePercentage_ == 0 ||\\n            (pool0Address == address(0) && pool1Address == address(0))\\n        ) revert InvalidInput();\\n\\n        _dataFeed = AggregatorV3Interface(dataFeedAddress);\\n\\n        _pool = IPancakeV3Pool(poolAddress);\\n\\n        _pool0 = IPancakeV3Pool(pool0Address);\\n        _pool1 = IPancakeV3Pool(pool1Address);\\n\\n        _token0 = IERC20(_pool.token0());\\n        _token1 = IERC20(_pool.token1());\\n\\n        usdt = IERC20(usdtAddress);\\n\\n        receiverAddress = receiverAddress_;\\n\\n        receiverPercentage = receiverFeePercentage_;\\n\\n        _factory = msg.sender;\\n\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n        if (address(_pool0) != address(0) && _pool0.token1() == usdtAddress) _pool0Direction = true;\\n        else if (address(_pool1) != address(0) && _pool1.token1() == usdtAddress) _pool1Direction = true;\\n    }\\n\\n    /// @inheritdoc IPositionManager\\n    function deposit(uint256 depositAmount, address sender) external onlyFactory returns (uint256 shares) {\\n        if (depositAmount < minDepositAmount) revert InvalidInput();\\n\\n        // Transfer USDT from user to contract\\n        usdt.safeTransferFrom(sender, address(this), depositAmount);\\n\\n        depositAmount = _chargeDepositFee(depositAmount);\\n\\n        uint256 token1Price = _getChainlinkPrice() * PRECISION;\\n\\n        // Invest the USDT in the current position\\n        if (_tickLower != _tickUpper) {\\n            // Harvest to collect fees\\n            _harvest();\\n\\n            // Burn liquidity from the position\\n            _burnLiquidity(_tickLower, _tickUpper, _liquidityForShares(_tickLower, _tickUpper, totalSupply()));\\n\\n            (uint256 amountToken0, uint256 amountToken1) = _getTotalAmounts();\\n\\n            uint256 poolPrice = _getPoolTokensPrice();\\n\\n            // If token0 or token1 is USDT, we need to adjust the amountToken0 or amountToken1\\n            if (address(_pool0) == address(0)) amountToken0 -= depositAmount;\\n            else if (address(_pool1) == address(0)) amountToken1 -= depositAmount;\\n\\n            uint256 contractLiqInToken1 = FullMath.mulDiv(amountToken0, poolPrice, PRECISION) + amountToken1;\\n\\n            uint256 userLiqInToken1 = FullMath.mulDiv(depositAmount, (PRECISION) * CHAINLINK_PRECISION, token1Price);\\n\\n            // Calculate shares to mint (totalSupply cannot be 0 if the contract is in position)\\n            shares = FullMath.mulDiv(userLiqInToken1, totalSupply(), contractLiqInToken1);\\n\\n            // Swap token0 or token1 to balance the contract\\n            _balanceContractTokens(amountToken0, amountToken1, poolPrice);\\n\\n            poolPrice = _getPoolTokensPrice();\\n\\n            (amountToken0, amountToken1) = _getTotalAmounts();\\n\\n            contractLiqInToken1 = FullMath.mulDiv(amountToken0, poolPrice, PRECISION) + amountToken1;\\n\\n            uint256 contractLiqInToken0 = FullMath.mulDiv(contractLiqInToken1, PRECISION, poolPrice);\\n\\n            uint256 token0Percentage = getRangePercentage(contractLiqInToken0, contractLiqInToken1, poolPrice);\\n\\n            // Swap USDT to token0 and token1 maintaining the balance percentage\\n            _balanceSpecifiedUsdtAmount(depositAmount, token1Price, poolPrice, token0Percentage);\\n\\n            _addLiquidity();\\n        } else {\\n            // Case when the contract is not in position\\n            // Calculate the amount of shares to mint\\n            shares = FullMath.mulDiv(depositAmount, token1Price, PRECISION);\\n\\n            if (totalSupply() > 0) {\\n                uint256 contractAmount = usdt.balanceOf(address(this)) - depositAmount;\\n\\n                uint256 token1ContractAmount = FullMath.mulDiv(contractAmount, token1Price, PRECISION);\\n\\n                shares = FullMath.mulDiv(shares, totalSupply(), token1ContractAmount);\\n            }\\n        }\\n\\n        _mint(sender, shares);\\n\\n        emit Deposit(sender, shares, depositAmount);\\n    }\\n\\n    /// @inheritdoc IPositionManager\\n    function withdraw(address sender) external onlyFactory nonReentrant {\\n        uint256 shares = balanceOf(sender);\\n\\n        if (shares == 0) revert InsufficientBalance();\\n\\n        // Contract is in position\\n        if (_tickLower != _tickUpper) {\\n            // Harvest to collect fees\\n            _harvest();\\n\\n            // Burn liquidity from the position\\n            _burnLiquidity(_tickLower, _tickUpper, _liquidityForShares(_tickLower, _tickUpper, totalSupply()));\\n\\n            (uint256 amountToken0, uint256 amountToken1) = _getTotalAmounts();\\n\\n            uint256 userAmount0 = FullMath.mulDiv(amountToken0, shares, totalSupply());\\n            uint256 userAmount1 = FullMath.mulDiv(amountToken1, shares, totalSupply());\\n\\n            if (userAmount0 > 0) _token0.safeTransfer(sender, userAmount0);\\n            if (userAmount1 > 0) _token1.safeTransfer(sender, userAmount1);\\n\\n            if (totalSupply() == shares)\\n                _tickLower = _tickUpper = 0; // Set the contract to not in position\\n            else {\\n                // Swap token0 or token1 to balance the contract\\n                _balanceContractTokens(amountToken0 - userAmount0, amountToken1 - userAmount1, _getPoolTokensPrice());\\n\\n                _addLiquidity();\\n            }\\n        } else {\\n            // Contract is not in position\\n            // Calculate the contract balance in token1\\n            uint256 contractAmount = usdt.balanceOf(address(this));\\n\\n            // Calculate the amount of USDT to send to the user\\n            uint256 userUsdtAmount = FullMath.mulDiv(contractAmount, shares, totalSupply());\\n\\n            usdt.safeTransfer(sender, userUsdtAmount);\\n        }\\n\\n        _burn(sender, shares);\\n\\n        emit Withdraw(sender, shares);\\n    }\\n\\n    /// @inheritdoc IPositionManager\\n    function addLiquidity(int24 tickLower, int24 tickUpper) external onlyRole(MANAGER_ROLE) {\\n        // Only add liquidity if the contract is not in position\\n        if (_tickLower != _tickUpper) revert InvalidEntry();\\n\\n        if (tickLower > tickUpper) revert InvalidInput();\\n\\n        _tickLower = tickLower;\\n        _tickUpper = tickUpper;\\n\\n        // Harvest to collect fees\\n        _harvest();\\n\\n        uint256 usdtAmount = usdt.balanceOf(address(this));\\n\\n        if (usdtAmount == 0) revert InvalidEntry();\\n\\n        uint256 token1Price = _getChainlinkPrice() * PRECISION;\\n\\n        uint256 poolPrice = _getPoolTokensPrice();\\n\\n        uint256 contractLiqInToken1 = FullMath.mulDiv(usdtAmount, (PRECISION) * CHAINLINK_PRECISION, token1Price);\\n        uint256 contractLiqInToken0 = FullMath.mulDiv(contractLiqInToken1, PRECISION, poolPrice);\\n\\n        // Calculate the percentage of token0 in the pool to know how much to swap\\n        uint256 token0Percentage = getRangePercentage(contractLiqInToken0, contractLiqInToken1, poolPrice);\\n\\n        _balanceSpecifiedUsdtAmount(usdtAmount, token1Price, poolPrice, token0Percentage);\\n\\n        _addLiquidity();\\n\\n        emit LiquidityAdded(_tickLower, _tickUpper);\\n    }\\n\\n    /// @inheritdoc IPositionManager\\n    function removeLiquidity() external onlyRole(MANAGER_ROLE) {\\n        // Only remove liquidity if the contract is in position\\n        if (_tickLower == _tickUpper) revert InvalidInput();\\n\\n        // Harvest to collect fees\\n        _harvest();\\n\\n        // Burn liquidity from the position\\n        _burnLiquidity(_tickLower, _tickUpper, _liquidityForShares(_tickLower, _tickUpper, totalSupply()));\\n\\n        // Swap token0 and token1 to USDT\\n        (uint256 amountToken0, uint256 amountToken1) = _getTotalAmounts();\\n\\n        uint256 token1Price = _getChainlinkPrice() * PRECISION;\\n\\n        _swapUsingPool(\\n            _pool1,\\n            amountToken1,\\n            _getAmountMin(amountToken1, token1Price, true),\\n            _pool1Direction, // token1 to USDT\\n            !_pool1Direction\\n        );\\n\\n        uint256 poolPrice = _getPoolTokensPrice();\\n\\n        uint256 amountOutMin = FullMath.mulDiv(amountToken0, poolPrice, PRECISION); // amountOutMin in token0 to token1\\n\\n        _swapUsingPool(\\n            _pool0,\\n            amountToken0,\\n            _getAmountMin(amountOutMin, token1Price, true),\\n            _pool0Direction, // token0 to USDT\\n            !_pool0Direction\\n        );\\n\\n        // Set the contract to not in position\\n        _tickLower = _tickUpper = 0;\\n\\n        emit LiquidityRemoved(_tickLower, _tickUpper);\\n    }\\n\\n    /// @inheritdoc IPositionManager\\n    function updatePosition(int24 tickLower, int24 tickUpper) external onlyRole(MANAGER_ROLE) {\\n        // Only update position if the contract is in position and new ticks are okay\\n        if (_tickLower == _tickUpper) revert InvalidEntry();\\n        if (tickLower > tickUpper) revert InvalidInput();\\n\\n        // Harvest to collect fees\\n        _harvest();\\n\\n        // Burn liquidity from the position\\n        _burnLiquidity(_tickLower, _tickUpper, _liquidityForShares(_tickLower, _tickUpper, totalSupply()));\\n\\n        _tickLower = tickLower;\\n        _tickUpper = tickUpper;\\n\\n        (uint256 amountToken0, uint256 amountToken1) = _getTotalAmounts();\\n\\n        uint256 poolPrice = _getPoolTokensPrice();\\n\\n        _balanceContractTokens(amountToken0, amountToken1, poolPrice);\\n\\n        _addLiquidity();\\n\\n        emit PositionUpdated(_tickLower, _tickUpper);\\n    }\\n\\n    /// @inheritdoc IPositionManager\\n    function reAddLiquidity() external {\\n        // Only re add liquidity if the contract is in position\\n        if (_tickLower == _tickUpper) revert InvalidEntry();\\n\\n        // Harvest to collect fees\\n        _harvest();\\n\\n        (uint256 amountToken0, uint256 amountToken1) = _getTotalAmounts();\\n\\n        uint256 poolPrice = _getPoolTokensPrice();\\n\\n        _balanceContractTokens(amountToken0, amountToken1, poolPrice);\\n\\n        _addLiquidity();\\n\\n        emit LiquidityAdded(_tickLower, _tickUpper);\\n    }\\n\\n    /// @inheritdoc IPositionManager\\n    function distributeRewards(uint256 amountOutMin) external onlyRole(MANAGER_ROLE) {\\n        IPositionManagerDistributor(_factory).distributeRewards(receiverAddress, receiverPercentage, amountOutMin);\\n    }\\n\\n    /// @inheritdoc IPositionManager\\n    function getRangePercentage(uint256 amount0, uint256 amount1, uint256 poolPrice) public view returns (uint256) {\\n        (uint160 sqrtPrice, int24 tick) = _priceAndTick();\\n\\n        uint160 sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick);\\n        uint160 sqrtRatioAX96 = TickMath.getSqrtRatioAtTick(_tickLower);\\n        uint160 sqrtRatioBX96 = TickMath.getSqrtRatioAtTick(_tickUpper);\\n\\n        uint128 liquidity0 = LiquidityAmounts.getLiquidityForAmount0Sorted(sqrtPrice, sqrtRatioBX96, amount0);\\n        uint128 liquidity1 = LiquidityAmounts.getLiquidityForAmount1Sorted(sqrtRatioAX96, sqrtPrice, amount1);\\n\\n        (amount0, amount1) = LiquidityAmounts.getAmountsForLiquidity(sqrtRatioX96, sqrtRatioAX96, sqrtRatioBX96, liquidity0 + liquidity1);\\n\\n        uint256 contractLiqInToken0 = FullMath.mulDiv(amount1, PRECISION, poolPrice);\\n\\n        return FullMath.mulDiv(amount0, uint128(PRECISION), amount0 + contractLiqInToken0);\\n    }\\n\\n    /// @inheritdoc IPositionManager\\n    function getTickRange() public view returns (int24, int24) {\\n        return (_tickLower, _tickUpper);\\n    }\\n\\n    /// @inheritdoc IPositionManager\\n    function setReceiverData(address receiverAddress_, uint256 receiverFeePercentage_) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (receiverFeePercentage_ > MAX_PERCENTAGE || receiverFeePercentage_ == 0 || receiverAddress_ == address(0)) revert InvalidInput();\\n\\n        receiverAddress = receiverAddress_;\\n        receiverPercentage = receiverFeePercentage_;\\n\\n        emit ReceiverDataUpdated(receiverAddress_, receiverFeePercentage_);\\n    }\\n\\n    /// @inheritdoc IPositionManager\\n    function setSlippage(uint256 slippage) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (slippage > MAX_PERCENTAGE) revert InvalidInput();\\n\\n        _slippage = slippage;\\n\\n        emit SlippageUpdated(slippage);\\n    }\\n\\n    /// @inheritdoc IPositionManager\\n    function setMinDepositAmount(uint256 minimumDepositAmount) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        minDepositAmount = minimumDepositAmount;\\n\\n        emit MinDepositAmountUpdated(minimumDepositAmount);\\n    }\\n\\n    /// @inheritdoc IPositionManager\\n    function setFee(uint256 depositFeePercentage, address feeReceiverAddress) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _setFee(depositFeePercentage, feeReceiverAddress);\\n    }\\n\\n    /// @dev Collects the fees from the position, swaps them to USDT and sends them to the factory\\n    function _harvest() private {\\n        (uint256 amountToken0Before, uint256 amountToken1Before) = _getTotalAmounts();\\n\\n        // Collect fees\\n        _collect();\\n\\n        (uint256 amountToken0After, uint256 amountToken1After) = _getTotalAmounts();\\n\\n        uint256 amountToken0 = amountToken0After - amountToken0Before;\\n        uint256 amountToken1 = amountToken1After - amountToken1Before;\\n\\n        uint256 token1Price = _getChainlinkPrice() * PRECISION;\\n\\n        amountToken1 = _swapUsingPool(\\n            _pool1,\\n            amountToken1,\\n            _getAmountMin(amountToken1, token1Price, true),\\n            _pool1Direction, // token1 to USDT\\n            !_pool1Direction\\n        );\\n\\n        uint256 poolPrice = _getPoolTokensPrice();\\n\\n        uint256 amountOutMin = FullMath.mulDiv(amountToken0, poolPrice, PRECISION); // amountOutMin in token0 to token1\\n\\n        amountToken0 = _swapUsingPool(\\n            _pool0,\\n            amountToken0,\\n            _getAmountMin(amountOutMin, token1Price, true),\\n            _pool0Direction, // token0 to USDT\\n            !_pool0Direction\\n        );\\n\\n        if (amountToken0 + amountToken1 > 0) usdt.safeTransfer(_factory, amountToken0 + amountToken1);\\n    }\\n\\n    /// @dev Balances the contract tokens to maintain the proportion of token0 and token1 in the pool\\n    function _balanceContractTokens(uint256 amountToken0, uint256 amountToken1, uint256 poolPrice) private {\\n        uint256 contractLiqInToken0 = FullMath.mulDiv(amountToken1, PRECISION, poolPrice) + amountToken0;\\n        uint256 contractLiqInToken1 = FullMath.mulDiv(amountToken0, poolPrice, PRECISION) + amountToken1;\\n\\n        // Calculate the percentage of token0 in the pool to know how much to swap\\n        uint256 token0Percentage = getRangePercentage(contractLiqInToken0, contractLiqInToken1, poolPrice);\\n\\n        // Calculate the percentage of token0 in the contract\\n        uint256 currentToken0Percentage = PRECISION - FullMath.mulDiv(amountToken1, PRECISION, contractLiqInToken1);\\n\\n        // If the current percentage is higher than the target percentage, we need to swap token0 to token1\\n        if (currentToken0Percentage > token0Percentage) {\\n            uint256 amount0ToSwap = amountToken0 - FullMath.mulDiv(contractLiqInToken0, token0Percentage, PRECISION);\\n\\n            _swapUsingPool(\\n                _pool,\\n                amount0ToSwap,\\n                _getAmountMin(amount0ToSwap, poolPrice * CHAINLINK_PRECISION, true), // poolPrice is adjusted to have same precision as chainlink price\\n                true, // token0 to token1\\n                false\\n            );\\n        } else {\\n            uint256 token1Percentage = PRECISION - token0Percentage;\\n            uint256 amount1ToSwap = amountToken1 - FullMath.mulDiv(contractLiqInToken1, token1Percentage, PRECISION);\\n\\n            _swapUsingPool(\\n                _pool,\\n                amount1ToSwap,\\n                _getAmountMin(amount1ToSwap, poolPrice * CHAINLINK_PRECISION, false), // poolPrice is adjusted to have same precision as chainlink price\\n                false, // token1 to token0\\n                true\\n            );\\n        }\\n    }\\n\\n    /// @dev Balances the USDT amount to maintain the proportion of token0 and token1 in the pool\\n    function _balanceSpecifiedUsdtAmount(uint256 usdtAmount, uint256 token1Price, uint256 poolPrice, uint256 token0Percentage) private {\\n        uint256 amountToSwapToToken0 = FullMath.mulDiv(usdtAmount, token0Percentage, PRECISION);\\n\\n        uint256 token0Price = FullMath.mulDiv(token1Price, poolPrice, PRECISION);\\n\\n        // Swap USDT to token0\\n        _swapUsingPool(\\n            _pool0,\\n            amountToSwapToToken0,\\n            _getAmountMin(amountToSwapToToken0, token0Price, false),\\n            !_pool0Direction, // USDT to token0\\n            _pool0Direction\\n        );\\n\\n        uint256 amountToSwapToToken1 = usdtAmount - amountToSwapToToken0;\\n\\n        // Swap USDT to token1\\n        _swapUsingPool(\\n            _pool1,\\n            amountToSwapToToken1,\\n            _getAmountMin(amountToSwapToToken1, token1Price, false),\\n            !_pool1Direction, // USDT to token1\\n            _pool1Direction\\n        );\\n    }\\n\\n    /// @dev Adds liquidity to the position\\n    function _addLiquidity() private {\\n        (uint256 amountToken0, uint256 amountToken1) = _getTotalAmounts();\\n\\n        // Then we fetch how much liquidity we get for adding at the main position ticks with our token balances\\n        (uint160 sqrtPrice, ) = _priceAndTick();\\n\\n        uint128 liquidity = LiquidityAmounts.getLiquidityForAmounts(\\n            sqrtPrice,\\n            TickMath.getSqrtRatioAtTick(_tickLower),\\n            TickMath.getSqrtRatioAtTick(_tickUpper),\\n            amountToken0,\\n            amountToken1\\n        );\\n\\n        // Flip minting to true and call the pool to mint the liquidity\\n        _minting = true;\\n\\n        _pool.mint(address(this), _tickLower, _tickUpper, liquidity, \\\"\\\");\\n    }\\n\\n    /// @notice Burns liquidity from the position\\n    function _burnLiquidity(int24 tickLower, int24 tickUpper, uint128 liquidity) private {\\n        if (liquidity > 0) {\\n            // Burn liquidity\\n            _pool.burn(tickLower, tickUpper, liquidity);\\n\\n            // Collect amount owed\\n            _collect();\\n        }\\n    }\\n\\n    function _collect() private {\\n        uint128 liquidity = _liquidity(_tickLower, _tickUpper);\\n\\n        // trigger an update of the position fees owed and fee growth snapshots if it has any liquidity\\n        if (liquidity > 0) _pool.burn(_tickLower, _tickUpper, 0);\\n\\n        // the actual amounts collected are returned\\n        _pool.collect(address(this), _tickLower, _tickUpper, MAX_UINT128, MAX_UINT128);\\n    }\\n\\n    function _getPoolTokensPrice() private view returns (uint256) {\\n        (, int24 tick) = _priceAndTick();\\n\\n        uint160 sqrtPriceByTick = TickMath.getSqrtRatioAtTick(tick);\\n\\n        // Price of token0 over token1\\n        return FullMath.mulDiv(uint256(sqrtPriceByTick) * uint256(sqrtPriceByTick), PRECISION, 2 ** (96 * 2));\\n    }\\n\\n    function _priceAndTick() private view returns (uint160 sqrtPriceX96, int24 tick) {\\n        (sqrtPriceX96, tick, , , , , ) = _pool.slot0();\\n    }\\n\\n    function _getTotalAmounts() private view returns (uint256 total0, uint256 total1) {\\n        total0 = _token0.balanceOf(address(this));\\n        total1 = _token1.balanceOf(address(this));\\n    }\\n\\n    function _getAmountMin(uint256 amount, uint256 price, bool fromToken) private view returns (uint256) {\\n        uint256 amountOutMin;\\n\\n        if (fromToken) amountOutMin = FullMath.mulDiv(amount, price, PRECISION) / CHAINLINK_PRECISION;\\n        else amountOutMin = FullMath.mulDiv(amount, (PRECISION) * CHAINLINK_PRECISION, price);\\n\\n        // amountOutMin with slippage applied\\n        return FullMath.mulDiv(amountOutMin, MAX_PERCENTAGE - _slippage, MAX_PERCENTAGE);\\n    }\\n\\n    function _getChainlinkPrice() private view returns (uint256) {\\n        (, int256 price, , uint256 updatedAt, ) = _dataFeed.latestRoundData();\\n\\n        if (price <= 0 || block.timestamp - TWENTY_MINUTES > updatedAt) revert InvalidInput();\\n\\n        return uint256(price);\\n    }\\n\\n    function _swapUsingPool(\\n        IPancakeV3Pool pool,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        bool zeroForOne,\\n        bool sqrtPriceLimitX96Case // false = min, true = max\\n    ) private returns (uint256) {\\n        uint256 balanceBefore;\\n\\n        if (address(pool) == address(0) || amountIn == 0) return amountIn;\\n\\n        if (zeroForOne) balanceBefore = IERC20(pool.token1()).balanceOf(address(this));\\n        else balanceBefore = IERC20(pool.token0()).balanceOf(address(this));\\n\\n        pool.swap(\\n            address(this),\\n            zeroForOne,\\n            int256(amountIn),\\n            sqrtPriceLimitX96Case ? uint160(TickMath.MAX_SQRT_RATIO) - 1 : uint160(TickMath.MIN_SQRT_RATIO + 1),\\n            \\\"\\\"\\n        );\\n\\n        uint256 amountOut;\\n\\n        if (zeroForOne) amountOut = IERC20(pool.token1()).balanceOf(address(this)) - balanceBefore;\\n        else amountOut = IERC20(pool.token0()).balanceOf(address(this)) - balanceBefore;\\n\\n        if (amountOut < amountOutMin) revert NotEnoughBalance();\\n\\n        return amountOut;\\n    }\\n\\n    function _liquidityForShares(int24 tickLower, int24 tickUpper, uint256 shares) private view returns (uint128) {\\n        uint128 liquidity = _liquidity(tickLower, tickUpper);\\n        return _uint128Safe(FullMath.mulDiv(uint256(liquidity), shares, totalSupply()));\\n    }\\n\\n    function _liquidity(int24 tickLower, int24 tickUpper) private view returns (uint128 liquidity) {\\n        bytes32 positionKey = keccak256(abi.encodePacked(address(this), tickLower, tickUpper));\\n        (liquidity, , , , ) = _pool.positions(positionKey);\\n    }\\n\\n    function _uint128Safe(uint256 x) private pure returns (uint128) {\\n        assert(x <= MAX_UINT128);\\n        return uint128(x);\\n    }\\n\\n    /// Callback functions\\n\\n    function pancakeswapV3MintCallback(uint256 amount0, uint256 amount1, bytes memory /*data*/) external {\\n        if (msg.sender != address(_pool)) revert NotPool();\\n        if (!_minting) revert InvalidEntry();\\n\\n        if (amount0 > 0) _token0.safeTransfer(address(_pool), amount0);\\n        if (amount1 > 0) _token1.safeTransfer(address(_pool), amount1);\\n\\n        _minting = false;\\n    }\\n\\n    function pancakeV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata /*data*/) external {\\n        if (msg.sender != address(_pool) && msg.sender != address(_pool0) && msg.sender != address(_pool1)) revert NotPool();\\n\\n        if (amount0Delta > 0) IERC20(IPancakeV3Pool(msg.sender).token0()).safeTransfer(msg.sender, uint256(amount0Delta));\\n        else if (amount1Delta > 0) IERC20(IPancakeV3Pool(msg.sender).token1()).safeTransfer(msg.sender, uint256(amount1Delta));\\n    }\\n\\n    function pancakeV3MintCallback(uint256 amount0Owed, uint256 amount1Owed, bytes calldata /*data*/) external {\\n        if (msg.sender != address(_pool)) revert NotPool();\\n\\n        if (amount0Owed > 0) _token0.safeTransfer(msg.sender, uint256(amount0Owed));\\n        if (amount1Owed > 0) _token1.safeTransfer(msg.sender, uint256(amount1Owed));\\n    }\\n}\\n\",\"keccak256\":\"0x7d42612a95bc0a55bcd152fa125b3ed33392e41b451429d117d3560e935bc342\",\"license\":\"MIT\"},\"contracts/PositionManagerDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {IPancakeV3Pool} from \\\"@pancakeswap/v3-core/contracts/interfaces/IPancakeV3Pool.sol\\\";\\nimport {IPancakeV3SwapCallback} from \\\"@pancakeswap/v3-core/contracts/interfaces/callback/IPancakeV3SwapCallback.sol\\\";\\nimport {FullMath} from \\\"@aperture_finance/uni-v3-lib/src/FullMath.sol\\\";\\nimport {TickMath} from \\\"@aperture_finance/uni-v3-lib/src/TickMath.sol\\\";\\n\\nimport {IPositionManagerDistributor} from \\\"./interfaces/IPositionManagerDistributor.sol\\\";\\nimport {PositionManager} from \\\"./PositionManager.sol\\\";\\n\\n/**\\n * @title PositionManagerDistributor\\n * @notice Distributes the rewards of the PositionManager contract\\n * @dev The rewards are distributed to the users and a specified receiver address\\n */\\ncontract PositionManagerDistributor is IPositionManagerDistributor, IPancakeV3SwapCallback {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// @notice Maximum percentage value with 4 decimals\\n    uint256 public constant MAX_PERCENTAGE = 1_000_000;\\n\\n    /// @notice Default admin role\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /// @notice Pool of USDT/WNative\\n    IPancakeV3Pool public immutable pool;\\n\\n    /// @notice PositionManager contract\\n    PositionManager public immutable sharesContract;\\n\\n    /// @notice USDT address\\n    IERC20 public immutable usdt;\\n\\n    /// @notice WNative address\\n    IERC20 public immutable wnative;\\n\\n    /// @notice Total amount of USDT in the contract owned by the users\\n    uint256 public usersTotalBalances;\\n\\n    /// @dev Set of users that have deposited USDT\\n    EnumerableSet.AddressSet private _usersSet;\\n\\n    /// @dev Mapping of the balances of the users\\n    mapping(address => uint256) private _balances;\\n\\n    /**\\n     * @notice Constructor\\n     * @param params Parameters to create the PositionManager contract\\n     * @param _pool Address of the PancakeSwap V3 pool of USDT/WNative\\n     */\\n    constructor(CreatePositionManagerParams memory params, address _pool) {\\n        if (_pool == address(0)) revert InvalidEntry();\\n\\n        pool = IPancakeV3Pool(_pool);\\n\\n        usdt = IERC20(pool.token0());\\n        wnative = IERC20(pool.token1());\\n\\n        sharesContract = new PositionManager(\\n            params.dataFeedAddress,\\n            params.poolAddress,\\n            params.pool0Address,\\n            params.pool1Address,\\n            address(usdt),\\n            params.receiverAddress,\\n            params.receiverFeePercentage\\n        );\\n\\n        sharesContract.grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        sharesContract.revokeRole(DEFAULT_ADMIN_ROLE, address(this));\\n    }\\n\\n    /// @inheritdoc IPositionManagerDistributor\\n    function deposit(uint256 depositAmount) external returns (uint256 shares) {\\n        _usersSet.add(msg.sender);\\n\\n        return sharesContract.deposit(depositAmount, msg.sender); // Already emits Deposit event\\n    }\\n\\n    /// @inheritdoc IPositionManagerDistributor\\n    function withdraw() external {\\n        sharesContract.withdraw(msg.sender); // Already emits Withdraw event\\n\\n        _usersSet.remove(msg.sender);\\n    }\\n\\n    /// @inheritdoc IPositionManagerDistributor\\n    function distributeRewards(address receiverAddress, uint256 receiverPercentage, uint256 amountOutMin) external {\\n        if (msg.sender != address(sharesContract)) revert WrongCaller();\\n\\n        uint256 contractBalance = usdt.balanceOf(address(this));\\n\\n        if (contractBalance <= usersTotalBalances) revert InvalidEntry(); // To distribute the surplus\\n\\n        uint256 amountToDistribute = contractBalance - usersTotalBalances;\\n\\n        uint256 totalShares = sharesContract.totalSupply();\\n\\n        if (totalShares == 0) {\\n            _swapUsdtAndTransfer(amountToDistribute, amountOutMin, receiverAddress);\\n\\n            emit RewardsDistributed(amountToDistribute);\\n            return;\\n        }\\n\\n        // Send receiverPercentage of the tokens to receiver\\n        uint256 receiverAmount = FullMath.mulDiv(amountToDistribute, receiverPercentage, MAX_PERCENTAGE);\\n\\n        _swapUsdtAndTransfer(receiverAmount, amountOutMin, receiverAddress);\\n\\n        amountToDistribute -= receiverAmount;\\n\\n        uint256 usersLength = _usersSet.length();\\n\\n        usersTotalBalances += amountToDistribute;\\n\\n        for (uint256 i; i < usersLength; i++) {\\n            address user = _usersSet.at(i);\\n\\n            // Calculate percentage of the shares over the total supply\\n            uint256 userPercentage = FullMath.mulDiv(sharesContract.balanceOf(user), MAX_PERCENTAGE, totalShares);\\n\\n            // Calculate the amount of USDT of that user using the percentage\\n            uint256 userUsdt = FullMath.mulDiv(amountToDistribute, userPercentage, MAX_PERCENTAGE);\\n\\n            if (userUsdt == 0) continue; // Should not happen\\n\\n            _balances[user] += userUsdt;\\n        }\\n\\n        emit RewardsDistributed(amountToDistribute + receiverAmount);\\n    }\\n\\n    /// @inheritdoc IPositionManagerDistributor\\n    function collectRewards() external {\\n        uint256 rewards = _balances[msg.sender];\\n\\n        if (rewards == 0) revert InvalidEntry();\\n\\n        _balances[msg.sender] = 0;\\n\\n        usersTotalBalances -= rewards;\\n\\n        usdt.safeTransfer(msg.sender, rewards);\\n\\n        emit RewardCollected(msg.sender, rewards);\\n    }\\n\\n    /// @inheritdoc IPositionManagerDistributor\\n    function balanceOf(address user) external view returns (uint256) {\\n        return _balances[user];\\n    }\\n\\n    /// @inheritdoc IPositionManagerDistributor\\n    function usersSet() external view returns (address[] memory) {\\n        return _usersSet.values();\\n    }\\n\\n    function _swapUsdtAndTransfer(uint256 amountIn, uint256 amountOutMin, address recipient) private {\\n        if (amountIn == 0) revert InvalidEntry();\\n\\n        pool.swap(\\n            address(this),\\n            true, // token0 to token1\\n            int256(amountIn),\\n            uint160(TickMath.MIN_SQRT_RATIO) + 1,\\n            \\\"\\\"\\n        );\\n\\n        uint256 wbnbBalance = wnative.balanceOf(address(this));\\n\\n        if (wbnbBalance < amountOutMin) revert NotEnoughBalance();\\n\\n        wnative.safeTransfer(recipient, wbnbBalance);\\n    }\\n\\n    function pancakeV3SwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata /*data*/) external {\\n        if (msg.sender != address(pool)) revert NotPool();\\n\\n        if (amount0Delta > 0) usdt.safeTransfer(msg.sender, uint256(amount0Delta));\\n        else if (amount1Delta > 0) wnative.safeTransfer(msg.sender, uint256(amount1Delta));\\n    }\\n}\\n\",\"keccak256\":\"0x1acf4c28aa2fd90fba5906a1bec1653094881dcd4ad12618e9ac2285c33bcbb1\",\"license\":\"MIT\"},\"contracts/interfaces/IPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/**\\n * @title IPositionManager\\n */\\ninterface IPositionManager {\\n    /// @dev Error thrown when an invalid input is provided\\n    error InvalidInput();\\n\\n    /// @dev Error thrown when user has insufficient shares to withdraw\\n    error InsufficientBalance();\\n\\n    /// @dev Error thrown when the caller is not the valid pool\\n    error NotPool();\\n\\n    /// @dev Error thrown when the balance is not enough\\n    error NotEnoughBalance();\\n\\n    /**\\n     * @notice Event emitted when a user deposits USDT and receives shares\\n     * @param user Address of the user\\n     * @param shares Amount of shares received\\n     * @param depositAmount Amount of USDT deposited\\n     */\\n    event Deposit(address indexed user, uint256 shares, uint256 depositAmount);\\n\\n    /**\\n     * @notice Event emitted when a user withdraws shares and receives funds\\n     * @param user Address of the user\\n     * @param shares Amount of shares withdrawn\\n     */\\n    event Withdraw(address indexed user, uint256 shares);\\n\\n    /**\\n     * @notice Event emitted when liquidity is added to the position\\n     * @param tickLower Lower tick of the position\\n     * @param tickUpper Upper tick of the position\\n     */\\n    event LiquidityAdded(int24 tickLower, int24 tickUpper);\\n\\n    /**\\n     * @notice Event emitted when liquidity is removed from the position\\n     * @param tickLower Lower tick of the position\\n     * @param tickUpper Upper tick of the position\\n     */\\n    event LiquidityRemoved(int24 tickLower, int24 tickUpper);\\n\\n    /**\\n     * @notice Event emitted when the position is updated\\n     * @param tickLower New lower tick of the position\\n     * @param tickUpper New upper tick of the position\\n     */\\n    event PositionUpdated(int24 tickLower, int24 tickUpper);\\n\\n    /**\\n     * @notice Event emitted when the receiver address and fee percentage are updated\\n     * @param receiverAddress Address of the receiver of the fees\\n     * @param receiverFeePercentage Percentage of the funds destined to the receiver\\n     */\\n    event ReceiverDataUpdated(address indexed receiverAddress, uint256 receiverFeePercentage);\\n\\n    /**\\n     * @notice Event emitted when the slippage is updated\\n     * @param slippage New slippage value\\n     */\\n    event SlippageUpdated(uint256 slippage);\\n\\n    /**\\n     * @notice Event emitted when the minimum deposit amount is updated\\n     * @param minimumDepositAmount New minimum deposit amount\\n     */\\n    event MinDepositAmountUpdated(uint256 minimumDepositAmount);\\n\\n    /**\\n     * @notice Function to deposit USDT and receive shares in return\\n     * @param depositAmount Amount of USDT to deposit\\n     * @return shares Amount of shares sent to the user\\n     * @dev The user must approve the contract to spend the USDT before calling this function\\n     */\\n    function deposit(uint256 depositAmount, address sender) external returns (uint256 shares);\\n\\n    /**\\n     * @notice Function to withdraw shares and receive funds in return\\n     * @dev The user must have shares to withdraw\\n     *      NOTE: If the contract is in position, the user will receive token0 and token1\\n     *            If the contract is not in position, the user will receive USDT\\n     */\\n    function withdraw(address sender) external;\\n\\n    /**\\n     * @notice Function to add liquidity to the position\\n     * @param tickLower Lower tick of the position\\n     * @param tickUpper Upper tick of the position\\n     * @dev Only the manager can call this function\\n     */\\n    function addLiquidity(int24 tickLower, int24 tickUpper) external;\\n\\n    /**\\n     * @notice Function to remove liquidity from the position\\n     * @dev Only the manager can call this function\\n     */\\n    function removeLiquidity() external;\\n\\n    /**\\n     * @notice Function to update the position\\n     * @param tickLower Lower tick of the position\\n     * @param tickUpper Upper tick of the position\\n     * @dev Only the manager can call this function\\n     */\\n    function updatePosition(int24 tickLower, int24 tickUpper) external;\\n\\n    /**\\n     * @notice Function to re-add liquidity to the position\\n     * @dev Since this function adds the remaining liquidity to the current position, it could be called by everyone\\n     */\\n    function reAddLiquidity() external;\\n\\n    /**\\n     * @notice Function to distribute rewards calling the factory contract\\n     * @param amountOutMin Minimum amount out for the swap\\n     * @dev Only the manager can call this function\\n     */\\n    function distributeRewards(uint256 amountOutMin) external;\\n\\n    /**\\n     * @notice Function to get the percentage of the range\\n     * @param amount0 Amount of token0 (must be in token0 units)\\n     * @param amount1 Amount of token1 (must be in token1 units)\\n     * @param poolPrice Price of the pool\\n     * @return percentage Percentage of the range\\n     * @dev The percentage is calculated as the percentage of token0 in the pool (using the amounts of the range)\\n     */\\n    function getRangePercentage(uint256 amount0, uint256 amount1, uint256 poolPrice) external view returns (uint256);\\n\\n    /**\\n     * @notice Function to get the current tick range of the position\\n     * @return tickLower Lower tick of the position\\n     * @return tickUpper Upper tick of the position\\n     * @dev The ticks are the same if the contract is not in position\\n     */\\n    function getTickRange() external view returns (int24, int24);\\n\\n    /**\\n     * @notice Function to set the receiver address and fee percentage\\n     * @param receiverAddress_ Address of the receiver of the fees\\n     * @param receiverFeePercentage_ Percentage of the funds destined to the receiver\\n     */\\n    function setReceiverData(address receiverAddress_, uint256 receiverFeePercentage_) external;\\n\\n    /**\\n     * @notice Function to set the slippage percentage\\n     * @param slippage New slippage value\\n     */\\n    function setSlippage(uint256 slippage) external;\\n\\n    /**\\n     * @notice Function to set the minimum deposit amount\\n     * @param minimumDepositAmount New minimum deposit amount\\n     */\\n    function setMinDepositAmount(uint256 minimumDepositAmount) external;\\n\\n    /**\\n     * @notice Function to set the fee percentage and the recipient address involved when a deposit fee is charged\\n     * @param depositFeePercentage New deposit fee percentage\\n     * @param feeReceiverAddress New fee receiver address\\n     */\\n    function setFee(uint256 depositFeePercentage, address feeReceiverAddress) external;\\n}\\n\",\"keccak256\":\"0xe7c339490eac0c4014cae209aecbc7a7783e55e7d3bbaea64440560197e9b47b\",\"license\":\"MIT\"},\"contracts/interfaces/IPositionManagerDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/**\\n * @title IPositionManagerDistributor\\n */\\ninterface IPositionManagerDistributor {\\n    /// @dev Error thrown when the caller is not the PositionManager contract\\n    error WrongCaller();\\n\\n    /// @dev Error thrown when the input is invalid\\n    error InvalidEntry();\\n\\n    /// @dev Error thrown when the caller is not the pool\\n    error NotPool();\\n\\n    /// @dev Error thrown when the balance is not enough\\n    error NotEnoughBalance();\\n\\n    /**\\n     * @notice Event emitted when the rewards are distributed\\n     * @param amount Amount of USDT distributed\\n     */\\n    event RewardsDistributed(uint256 amount);\\n\\n    /**\\n     * @notice Event emitted when the user collects the rewards\\n     * @param user Address of the user\\n     * @param amount Amount of USDT collected\\n     */\\n    event RewardCollected(address indexed user, uint256 amount);\\n\\n    /**\\n     * @dev Parameters to create the PositionManager contract\\n     * @param dataFeedAddress Address of the data feed used to get the token1 price in USD\\n     * @param poolAddress Address of the main PancakeSwap V3 pool\\n     * @param pool0Address Address of the pool to swap USDT to token0\\n     * @param pool1Address Address of the pool to swap USDT to token1\\n     * @param receiverAddress Address of the receiver of the fees\\n     * @param receiverFeePercentage Percentage of the funds destined to the receiver\\n     */\\n    struct CreatePositionManagerParams {\\n        address dataFeedAddress;\\n        address poolAddress;\\n        address pool0Address;\\n        address pool1Address;\\n        address receiverAddress;\\n        uint256 receiverFeePercentage;\\n    }\\n\\n    /**\\n     * @notice Deposit USDT to the positionManager\\n     * @param depositAmount Amount of USDT to deposit\\n     */\\n    function deposit(uint256 depositAmount) external returns (uint256 shares);\\n\\n    /// @notice Withdraw Funds from the positionManager\\n    function withdraw() external;\\n\\n    /**\\n     * @notice Distribute the rewards accumulated by the PositionManager contract\\n     * @param receiverAddress Address of the receiver of the fees\\n     * @param receiverPercentage Percentage of the funds destined to the receiver\\n     * @param amountOutMin Minimum amount of wnative to receive\\n     * @dev Only the PositionManager contract can call this function\\n     */\\n    function distributeRewards(address receiverAddress, uint256 receiverPercentage, uint256 amountOutMin) external;\\n\\n    /**\\n     * @notice Collect rewards for the caller\\n     * @dev User must have a balance greater than 0\\n     */\\n    function collectRewards() external;\\n\\n    /**\\n     * @notice Get the balance of a user\\n     * @param user Address of the user\\n     */\\n    function balanceOf(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the users set\\n     * @return Users set\\n     */\\n    function usersSet() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x6366455640fc8798fd3a215f24b17c7d897523584414a7ab7ee961f09b80f7af\",\"license\":\"MIT\"},\"solady/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\nlibrary FixedPointMathLib {\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The operation failed, as the output exceeds the maximum value of uint256.\\n    error ExpOverflow();\\n\\n    /// @dev The operation failed, as the output exceeds the maximum value of uint256.\\n    error FactorialOverflow();\\n\\n    /// @dev The operation failed, due to an overflow.\\n    error RPowOverflow();\\n\\n    /// @dev The mantissa is too big to fit.\\n    error MantissaOverflow();\\n\\n    /// @dev The operation failed, due to an multiplication overflow.\\n    error MulWadFailed();\\n\\n    /// @dev The operation failed, due to an multiplication overflow.\\n    error SMulWadFailed();\\n\\n    /// @dev The operation failed, either due to a multiplication overflow, or a division by a zero.\\n    error DivWadFailed();\\n\\n    /// @dev The operation failed, either due to a multiplication overflow, or a division by a zero.\\n    error SDivWadFailed();\\n\\n    /// @dev The operation failed, either due to a multiplication overflow, or a division by a zero.\\n    error MulDivFailed();\\n\\n    /// @dev The division failed, as the denominator is zero.\\n    error DivFailed();\\n\\n    /// @dev The full precision multiply-divide operation failed, either due\\n    /// to the result being larger than 256 bits, or a division by a zero.\\n    error FullMulDivFailed();\\n\\n    /// @dev The output is undefined, as the input is less-than-or-equal to zero.\\n    error LnWadUndefined();\\n\\n    /// @dev The input outside the acceptable domain.\\n    error OutOfDomain();\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev The scalar of ETH and most ERC20s.\\n    uint256 internal constant WAD = 1e18;\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*              SIMPLIFIED FIXED POINT OPERATIONS             */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Equivalent to `(x * y) / WAD` rounded down.\\n    function mulWad(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to `require(y == 0 || x <= type(uint256).max / y)`.\\n            if mul(y, gt(x, div(not(0), y))) {\\n                mstore(0x00, 0xbac65e5b) // `MulWadFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := div(mul(x, y), WAD)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * y) / WAD` rounded down.\\n    function sMulWad(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mul(x, y)\\n            // Equivalent to `require((x == 0 || z / x == y) && !(x == -1 && y == type(int256).min))`.\\n            if iszero(gt(or(iszero(x), eq(sdiv(z, x), y)), lt(not(x), eq(y, shl(255, 1))))) {\\n                mstore(0x00, 0xedcd4dd4) // `SMulWadFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := sdiv(z, WAD)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * y) / WAD` rounded down, but without overflow checks.\\n    function rawMulWad(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := div(mul(x, y), WAD)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * y) / WAD` rounded down, but without overflow checks.\\n    function rawSMulWad(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := sdiv(mul(x, y), WAD)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * y) / WAD` rounded up.\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to `require(y == 0 || x <= type(uint256).max / y)`.\\n            if mul(y, gt(x, div(not(0), y))) {\\n                mstore(0x00, 0xbac65e5b) // `MulWadFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := add(iszero(iszero(mod(mul(x, y), WAD))), div(mul(x, y), WAD))\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * y) / WAD` rounded up, but without overflow checks.\\n    function rawMulWadUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := add(iszero(iszero(mod(mul(x, y), WAD))), div(mul(x, y), WAD))\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * WAD) / y` rounded down.\\n    function divWad(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to `require(y != 0 && (WAD == 0 || x <= type(uint256).max / WAD))`.\\n            if iszero(mul(y, iszero(mul(WAD, gt(x, div(not(0), WAD)))))) {\\n                mstore(0x00, 0x7c5f487d) // `DivWadFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := div(mul(x, WAD), y)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * WAD) / y` rounded down.\\n    function sDivWad(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mul(x, WAD)\\n            // Equivalent to `require(y != 0 && ((x * WAD) / WAD == x))`.\\n            if iszero(and(iszero(iszero(y)), eq(sdiv(z, WAD), x))) {\\n                mstore(0x00, 0x5c43740d) // `SDivWadFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := sdiv(mul(x, WAD), y)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * WAD) / y` rounded down, but without overflow and divide by zero checks.\\n    function rawDivWad(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := div(mul(x, WAD), y)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * WAD) / y` rounded down, but without overflow and divide by zero checks.\\n    function rawSDivWad(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := sdiv(mul(x, WAD), y)\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * WAD) / y` rounded up.\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to `require(y != 0 && (WAD == 0 || x <= type(uint256).max / WAD))`.\\n            if iszero(mul(y, iszero(mul(WAD, gt(x, div(not(0), WAD)))))) {\\n                mstore(0x00, 0x7c5f487d) // `DivWadFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := add(iszero(iszero(mod(mul(x, WAD), y))), div(mul(x, WAD), y))\\n        }\\n    }\\n\\n    /// @dev Equivalent to `(x * WAD) / y` rounded up, but without overflow and divide by zero checks.\\n    function rawDivWadUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := add(iszero(iszero(mod(mul(x, WAD), y))), div(mul(x, WAD), y))\\n        }\\n    }\\n\\n    /// @dev Equivalent to `x` to the power of `y`.\\n    /// because `x ** y = (e ** ln(x)) ** y = e ** (ln(x) * y)`.\\n    function powWad(int256 x, int256 y) internal pure returns (int256) {\\n        // Using `ln(x)` means `x` must be greater than 0.\\n        return expWad((lnWad(x) * y) / int256(WAD));\\n    }\\n\\n    /// @dev Returns `exp(x)`, denominated in `WAD`.\\n    /// Credit to Remco Bloemen under MIT license: https://2\\u03c0.com/22/exp-ln\\n    function expWad(int256 x) internal pure returns (int256 r) {\\n        unchecked {\\n            // When the result is less than 0.5 we return zero.\\n            // This happens when `x <= (log(1e-18) * 1e18) ~ -4.15e19`.\\n            if (x <= -41446531673892822313) return r;\\n\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // When the result is greater than `(2**255 - 1) / 1e18` we can not represent it as\\n                // an int. This happens when `x >= floor(log((2**255 - 1) / 1e18) * 1e18) \\u2248 135`.\\n                if iszero(slt(x, 135305999368893231589)) {\\n                    mstore(0x00, 0xa37bfec9) // `ExpOverflow()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n\\n            // `x` is now in the range `(-42, 136) * 1e18`. Convert to `(-42, 136) * 2**96`\\n            // for more intermediate precision and a binary basis. This base conversion\\n            // is a multiplication by 1e18 / 2**96 = 5**18 / 2**78.\\n            x = (x << 78) / 5 ** 18;\\n\\n            // Reduce range of x to (-\\u00bd ln 2, \\u00bd ln 2) * 2**96 by factoring out powers\\n            // of two such that exp(x) = exp(x') * 2**k, where k is an integer.\\n            // Solving this gives k = round(x / log(2)) and x' = x - k * log(2).\\n            int256 k = ((x << 96) / 54916777467707473351141471128 + 2 ** 95) >> 96;\\n            x = x - k * 54916777467707473351141471128;\\n\\n            // `k` is in the range `[-61, 195]`.\\n\\n            // Evaluate using a (6, 7)-term rational approximation.\\n            // `p` is made monic, we'll multiply by a scale factor later.\\n            int256 y = x + 1346386616545796478920950773328;\\n            y = ((y * x) >> 96) + 57155421227552351082224309758442;\\n            int256 p = y + x - 94201549194550492254356042504812;\\n            p = ((p * y) >> 96) + 28719021644029726153956944680412240;\\n            p = p * x + (4385272521454847904659076985693276 << 96);\\n\\n            // We leave `p` in `2**192` basis so we don't need to scale it back up for the division.\\n            int256 q = x - 2855989394907223263936484059900;\\n            q = ((q * x) >> 96) + 50020603652535783019961831881945;\\n            q = ((q * x) >> 96) - 533845033583426703283633433725380;\\n            q = ((q * x) >> 96) + 3604857256930695427073651918091429;\\n            q = ((q * x) >> 96) - 14423608567350463180887372962807573;\\n            q = ((q * x) >> 96) + 26449188498355588339934803723976023;\\n\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                // Div in assembly because solidity adds a zero check despite the unchecked.\\n                // The q polynomial won't have zeros in the domain as all its roots are complex.\\n                // No scaling is necessary because p is already `2**96` too large.\\n                r := sdiv(p, q)\\n            }\\n\\n            // r should be in the range `(0.09, 0.25) * 2**96`.\\n\\n            // We now need to multiply r by:\\n            // - The scale factor `s \\u2248 6.031367120`.\\n            // - The `2**k` factor from the range reduction.\\n            // - The `1e18 / 2**96` factor for base conversion.\\n            // We do this all at once, with an intermediate result in `2**213`\\n            // basis, so the final right shift is always by a positive amount.\\n            r = int256(\\n                (uint256(r) * 3822833074963236453042738258902158003155416615667) >> uint256(195 - k)\\n            );\\n        }\\n    }\\n\\n    /// @dev Returns `ln(x)`, denominated in `WAD`.\\n    /// Credit to Remco Bloemen under MIT license: https://2\\u03c0.com/22/exp-ln\\n    function lnWad(int256 x) internal pure returns (int256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // We want to convert `x` from `10**18` fixed point to `2**96` fixed point.\\n            // We do this by multiplying by `2**96 / 10**18`. But since\\n            // `ln(x * C) = ln(x) + ln(C)`, we can simply do nothing here\\n            // and add `ln(2**96 / 10**18)` at the end.\\n\\n            // Compute `k = log2(x) - 96`, `r = 159 - k = 255 - log2(x) = 255 ^ log2(x)`.\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // We place the check here for more optimal stack operations.\\n            if iszero(sgt(x, 0)) {\\n                mstore(0x00, 0x1615e638) // `LnWadUndefined()`.\\n                revert(0x1c, 0x04)\\n            }\\n            // forgefmt: disable-next-item\\n            r := xor(r, byte(and(0x1f, shr(shr(r, x), 0x8421084210842108cc6318c6db6d54be)),\\n                0xf8f9f9faf9fdfafbf9fdfcfdfafbfcfef9fafdfafcfcfbfefafafcfbffffffff))\\n\\n            // Reduce range of x to (1, 2) * 2**96\\n            // ln(2^k * x) = k * ln(2) + ln(x)\\n            x := shr(159, shl(r, x))\\n\\n            // Evaluate using a (8, 8)-term rational approximation.\\n            // `p` is made monic, we will multiply by a scale factor later.\\n            // forgefmt: disable-next-item\\n            let p := sub( // This heavily nested expression is to avoid stack-too-deep for via-ir.\\n                sar(96, mul(add(43456485725739037958740375743393,\\n                sar(96, mul(add(24828157081833163892658089445524,\\n                sar(96, mul(add(3273285459638523848632254066296,\\n                    x), x))), x))), x)), 11111509109440967052023855526967)\\n            p := sub(sar(96, mul(p, x)), 45023709667254063763336534515857)\\n            p := sub(sar(96, mul(p, x)), 14706773417378608786704636184526)\\n            p := sub(mul(p, x), shl(96, 795164235651350426258249787498))\\n            // We leave `p` in `2**192` basis so we don't need to scale it back up for the division.\\n\\n            // `q` is monic by convention.\\n            let q := add(5573035233440673466300451813936, x)\\n            q := add(71694874799317883764090561454958, sar(96, mul(x, q)))\\n            q := add(283447036172924575727196451306956, sar(96, mul(x, q)))\\n            q := add(401686690394027663651624208769553, sar(96, mul(x, q)))\\n            q := add(204048457590392012362485061816622, sar(96, mul(x, q)))\\n            q := add(31853899698501571402653359427138, sar(96, mul(x, q)))\\n            q := add(909429971244387300277376558375, sar(96, mul(x, q)))\\n\\n            // `p / q` is in the range `(0, 0.125) * 2**96`.\\n\\n            // Finalization, we need to:\\n            // - Multiply by the scale factor `s = 5.549\\u2026`.\\n            // - Add `ln(2**96 / 10**18)`.\\n            // - Add `k * ln(2)`.\\n            // - Multiply by `10**18 / 2**96 = 5**18 >> 78`.\\n\\n            // The q polynomial is known not to have zeros in the domain.\\n            // No scaling required because p is already `2**96` too large.\\n            p := sdiv(p, q)\\n            // Multiply by the scaling factor: `s * 5**18 * 2**96`, base is now `5**18 * 2**192`.\\n            p := mul(1677202110996718588342820967067443963516166, p)\\n            // Add `ln(2) * k * 5**18 * 2**192`.\\n            // forgefmt: disable-next-item\\n            p := add(mul(16597577552685614221487285958193947469193820559219878177908093499208371, sub(159, r)), p)\\n            // Add `ln(2**96 / 10**18) * 5**18 * 2**192`.\\n            p := add(600920179829731861736702779321621459595472258049074101567377883020018308, p)\\n            // Base conversion: mul `2**18 / 2**192`.\\n            r := sar(174, p)\\n        }\\n    }\\n\\n    /// @dev Returns `W_0(x)`, denominated in `WAD`.\\n    /// See: https://en.wikipedia.org/wiki/Lambert_W_function\\n    /// a.k.a. Product log function. This is an approximation of the principal branch.\\n    function lambertW0Wad(int256 x) internal pure returns (int256 w) {\\n        // forgefmt: disable-next-item\\n        unchecked {\\n            if ((w = x) <= -367879441171442322) revert OutOfDomain(); // `x` less than `-1/e`.\\n            int256 wad = int256(WAD);\\n            int256 p = x;\\n            uint256 c; // Whether we need to avoid catastrophic cancellation.\\n            uint256 i = 4; // Number of iterations.\\n            if (w <= 0x1ffffffffffff) {\\n                if (-0x4000000000000 <= w) {\\n                    i = 1; // Inputs near zero only take one step to converge.\\n                } else if (w <= -0x3ffffffffffffff) {\\n                    i = 32; // Inputs near `-1/e` take very long to converge.\\n                }\\n            } else if (w >> 63 == 0) {\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    // Inline log2 for more performance, since the range is small.\\n                    let v := shr(49, w)\\n                    let l := shl(3, lt(0xff, v))\\n                    l := add(or(l, byte(and(0x1f, shr(shr(l, v), 0x8421084210842108cc6318c6db6d54be)),\\n                        0x0706060506020504060203020504030106050205030304010505030400000000)), 49)\\n                    w := sdiv(shl(l, 7), byte(sub(l, 31), 0x0303030303030303040506080c13))\\n                    c := gt(l, 60)\\n                    i := add(2, add(gt(l, 53), c))\\n                }\\n            } else {\\n                int256 ll = lnWad(w = lnWad(w));\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    // `w = ln(x) - ln(ln(x)) + b * ln(ln(x)) / ln(x)`.\\n                    w := add(sdiv(mul(ll, 1023715080943847266), w), sub(w, ll))\\n                    i := add(3, iszero(shr(68, x)))\\n                    c := iszero(shr(143, x))\\n                }\\n                if (c == 0) {\\n                    do { // If `x` is big, use Newton's so that intermediate values won't overflow.\\n                        int256 e = expWad(w);\\n                        /// @solidity memory-safe-assembly\\n                        assembly {\\n                            let t := mul(w, div(e, wad))\\n                            w := sub(w, sdiv(sub(t, x), div(add(e, t), wad)))\\n                        }\\n                        if (p <= w) break;\\n                        p = w;\\n                    } while (--i != 0);\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        w := sub(w, sgt(w, 2))\\n                    }\\n                    return w;\\n                }\\n            }\\n            do { // Otherwise, use Halley's for faster convergence.\\n                int256 e = expWad(w);\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let t := add(w, wad)\\n                    let s := sub(mul(w, e), mul(x, wad))\\n                    w := sub(w, sdiv(mul(s, wad), sub(mul(e, t), sdiv(mul(add(t, wad), s), add(t, t)))))\\n                }\\n                if (p <= w) break;\\n                p = w;\\n            } while (--i != c);\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                w := sub(w, sgt(w, 2))\\n            }\\n            // For certain ranges of `x`, we'll use the quadratic-rate recursive formula of\\n            // R. Iacono and J.P. Boyd for the last iteration, to avoid catastrophic cancellation.\\n            if (c != 0) {\\n                int256 t = w | 1;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    x := sdiv(mul(x, wad), t)\\n                }\\n                x = (t * (wad + lnWad(x)));\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    w := sdiv(x, add(wad, t))\\n                }\\n            }\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                  GENERAL NUMBER UTILITIES                  */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Calculates `floor(x * y / d)` with full precision.\\n    /// Throws if result overflows a uint256 or when `d` is zero.\\n    /// Credit to Remco Bloemen under MIT license: https://2\\u03c0.com/21/muldiv\\n    function fullMulDiv(uint256 x, uint256 y, uint256 d) internal pure returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for {} 1 {} {\\n                // 512-bit multiply `[p1 p0] = x * y`.\\n                // Compute the product mod `2**256` and mod `2**256 - 1`\\n                // then use the Chinese Remainder Theorem to reconstruct\\n                // the 512 bit result. The result is stored in two 256\\n                // variables such that `product = p1 * 2**256 + p0`.\\n\\n                // Least significant 256 bits of the product.\\n                result := mul(x, y) // Temporarily use `result` as `p0` to save gas.\\n                let mm := mulmod(x, y, not(0))\\n                // Most significant 256 bits of the product.\\n                let p1 := sub(mm, add(result, lt(mm, result)))\\n\\n                // Handle non-overflow cases, 256 by 256 division.\\n                if iszero(p1) {\\n                    if iszero(d) {\\n                        mstore(0x00, 0xae47f702) // `FullMulDivFailed()`.\\n                        revert(0x1c, 0x04)\\n                    }\\n                    result := div(result, d)\\n                    break\\n                }\\n\\n                // Make sure the result is less than `2**256`. Also prevents `d == 0`.\\n                if iszero(gt(d, p1)) {\\n                    mstore(0x00, 0xae47f702) // `FullMulDivFailed()`.\\n                    revert(0x1c, 0x04)\\n                }\\n\\n                /*------------------- 512 by 256 division --------------------*/\\n\\n                // Make division exact by subtracting the remainder from `[p1 p0]`.\\n                // Compute remainder using mulmod.\\n                let r := mulmod(x, y, d)\\n                // `t` is the least significant bit of `d`.\\n                // Always greater or equal to 1.\\n                let t := and(d, sub(0, d))\\n                // Divide `d` by `t`, which is a power of two.\\n                d := div(d, t)\\n                // Invert `d mod 2**256`\\n                // Now that `d` is an odd number, it has an inverse\\n                // modulo `2**256` such that `d * inv = 1 mod 2**256`.\\n                // Compute the inverse by starting with a seed that is correct\\n                // correct for four bits. That is, `d * inv = 1 mod 2**4`.\\n                let inv := xor(2, mul(3, d))\\n                // Now use Newton-Raphson iteration to improve the precision.\\n                // Thanks to Hensel's lifting lemma, this also works in modular\\n                // arithmetic, doubling the correct bits in each step.\\n                inv := mul(inv, sub(2, mul(d, inv))) // inverse mod 2**8\\n                inv := mul(inv, sub(2, mul(d, inv))) // inverse mod 2**16\\n                inv := mul(inv, sub(2, mul(d, inv))) // inverse mod 2**32\\n                inv := mul(inv, sub(2, mul(d, inv))) // inverse mod 2**64\\n                inv := mul(inv, sub(2, mul(d, inv))) // inverse mod 2**128\\n                result :=\\n                    mul(\\n                        // Divide [p1 p0] by the factors of two.\\n                        // Shift in bits from `p1` into `p0`. For this we need\\n                        // to flip `t` such that it is `2**256 / t`.\\n                        or(\\n                            mul(sub(p1, gt(r, result)), add(div(sub(0, t), t), 1)),\\n                            div(sub(result, r), t)\\n                        ),\\n                        // inverse mod 2**256\\n                        mul(inv, sub(2, mul(d, inv)))\\n                    )\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Calculates `floor(x * y / d)` with full precision, rounded up.\\n    /// Throws if result overflows a uint256 or when `d` is zero.\\n    /// Credit to Uniswap-v3-core under MIT license:\\n    /// https://github.com/Uniswap/v3-core/blob/main/contracts/libraries/FullMath.sol\\n    function fullMulDivUp(uint256 x, uint256 y, uint256 d) internal pure returns (uint256 result) {\\n        result = fullMulDiv(x, y, d);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if mulmod(x, y, d) {\\n                result := add(result, 1)\\n                if iszero(result) {\\n                    mstore(0x00, 0xae47f702) // `FullMulDivFailed()`.\\n                    revert(0x1c, 0x04)\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns `floor(x * y / d)`.\\n    /// Reverts if `x * y` overflows, or `d` is zero.\\n    function mulDiv(uint256 x, uint256 y, uint256 d) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(d != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(d, iszero(mul(y, gt(x, div(not(0), y)))))) {\\n                mstore(0x00, 0xad251c27) // `MulDivFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := div(mul(x, y), d)\\n        }\\n    }\\n\\n    /// @dev Returns `ceil(x * y / d)`.\\n    /// Reverts if `x * y` overflows, or `d` is zero.\\n    function mulDivUp(uint256 x, uint256 y, uint256 d) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(d != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(d, iszero(mul(y, gt(x, div(not(0), y)))))) {\\n                mstore(0x00, 0xad251c27) // `MulDivFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := add(iszero(iszero(mod(mul(x, y), d))), div(mul(x, y), d))\\n        }\\n    }\\n\\n    /// @dev Returns `ceil(x / d)`.\\n    /// Reverts if `d` is zero.\\n    function divUp(uint256 x, uint256 d) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(d) {\\n                mstore(0x00, 0x65244e4e) // `DivFailed()`.\\n                revert(0x1c, 0x04)\\n            }\\n            z := add(iszero(iszero(mod(x, d))), div(x, d))\\n        }\\n    }\\n\\n    /// @dev Returns `max(0, x - y)`.\\n    function zeroFloorSub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mul(gt(x, y), sub(x, y))\\n        }\\n    }\\n\\n    /// @dev Exponentiate `x` to `y` by squaring, denominated in base `b`.\\n    /// Reverts if the computation overflows.\\n    function rpow(uint256 x, uint256 y, uint256 b) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mul(b, iszero(y)) // `0 ** 0 = 1`. Otherwise, `0 ** n = 0`.\\n            if x {\\n                z := xor(b, mul(xor(b, x), and(y, 1))) // `z = isEven(y) ? scale : x`\\n                let half := shr(1, b) // Divide `b` by 2.\\n                // Divide `y` by 2 every iteration.\\n                for { y := shr(1, y) } y { y := shr(1, y) } {\\n                    let xx := mul(x, x) // Store x squared.\\n                    let xxRound := add(xx, half) // Round to the nearest number.\\n                    // Revert if `xx + half` overflowed, or if `x ** 2` overflows.\\n                    if or(lt(xxRound, xx), shr(128, x)) {\\n                        mstore(0x00, 0x49f7642b) // `RPowOverflow()`.\\n                        revert(0x1c, 0x04)\\n                    }\\n                    x := div(xxRound, b) // Set `x` to scaled `xxRound`.\\n                    // If `y` is odd:\\n                    if and(y, 1) {\\n                        let zx := mul(z, x) // Compute `z * x`.\\n                        let zxRound := add(zx, half) // Round to the nearest number.\\n                        // If `z * x` overflowed or `zx + half` overflowed:\\n                        if or(xor(div(zx, x), z), lt(zxRound, zx)) {\\n                            // Revert if `x` is non-zero.\\n                            if iszero(iszero(x)) {\\n                                mstore(0x00, 0x49f7642b) // `RPowOverflow()`.\\n                                revert(0x1c, 0x04)\\n                            }\\n                        }\\n                        z := div(zxRound, b) // Return properly scaled `zxRound`.\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns the square root of `x`.\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // `floor(sqrt(2**15)) = 181`. `sqrt(2**15) - 181 = 2.84`.\\n            z := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n            // Let `y = x / 2**r`. We check `y >= 2**(k + 8)`\\n            // but shift right by `k` bits to ensure that if `x >= 256`, then `y >= 256`.\\n            let r := shl(7, lt(0xffffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffffff, shr(r, x))))\\n            z := shl(shr(1, r), z)\\n\\n            // Goal was to get `z*z*y` within a small factor of `x`. More iterations could\\n            // get y in a tighter range. Currently, we will have y in `[256, 256*(2**16))`.\\n            // We ensured `y >= 256` so that the relative difference between `y` and `y+1` is small.\\n            // That's not possible if `x < 256` but we can just verify those cases exhaustively.\\n\\n            // Now, `z*z*y <= x < z*z*(y+1)`, and `y <= 2**(16+8)`, and either `y >= 256`, or `x < 256`.\\n            // Correctness can be checked exhaustively for `x < 256`, so we assume `y >= 256`.\\n            // Then `z*sqrt(y)` is within `sqrt(257)/sqrt(256)` of `sqrt(x)`, or about 20bps.\\n\\n            // For `s` in the range `[1/256, 256]`, the estimate `f(s) = (181/1024) * (s+1)`\\n            // is in the range `(1/2.84 * sqrt(s), 2.84 * sqrt(s))`,\\n            // with largest error when `s = 1` and when `s = 256` or `1/256`.\\n\\n            // Since `y` is in `[256, 256*(2**16))`, let `a = y/65536`, so that `a` is in `[1/256, 256)`.\\n            // Then we can estimate `sqrt(y)` using\\n            // `sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2**18`.\\n\\n            // There is no overflow risk here since `y < 2**136` after the first branch above.\\n            z := shr(18, mul(z, add(shr(r, x), 65536))) // A `mul()` is saved from starting `z` at 181.\\n\\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // If `x+1` is a perfect square, the Babylonian method cycles between\\n            // `floor(sqrt(x))` and `ceil(sqrt(x))`. This statement ensures we return floor.\\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n            z := sub(z, lt(div(x, z), z))\\n        }\\n    }\\n\\n    /// @dev Returns the cube root of `x`.\\n    /// Credit to bout3fiddy and pcaversaccio under AGPLv3 license:\\n    /// https://github.com/pcaversaccio/snekmate/blob/main/src/utils/Math.vy\\n    function cbrt(uint256 x) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n\\n            z := div(shl(div(r, 3), shl(lt(0xf, shr(r, x)), 0xf)), xor(7, mod(r, 3)))\\n\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n            z := div(add(add(div(x, mul(z, z)), z), z), 3)\\n\\n            z := sub(z, lt(div(x, mul(z, z)), z))\\n        }\\n    }\\n\\n    /// @dev Returns the square root of `x`, denominated in `WAD`.\\n    function sqrtWad(uint256 x) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = 10 ** 9;\\n            if (x <= type(uint256).max / 10 ** 36 - 1) {\\n                x *= 10 ** 18;\\n                z = 1;\\n            }\\n            z *= sqrt(x);\\n        }\\n    }\\n\\n    /// @dev Returns the cube root of `x`, denominated in `WAD`.\\n    function cbrtWad(uint256 x) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = 10 ** 12;\\n            if (x <= (type(uint256).max / 10 ** 36) * 10 ** 18 - 1) {\\n                if (x >= type(uint256).max / 10 ** 36) {\\n                    x *= 10 ** 18;\\n                    z = 10 ** 6;\\n                } else {\\n                    x *= 10 ** 36;\\n                    z = 1;\\n                }\\n            }\\n            z *= cbrt(x);\\n        }\\n    }\\n\\n    /// @dev Returns the factorial of `x`.\\n    function factorial(uint256 x) internal pure returns (uint256 result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(lt(x, 58)) {\\n                mstore(0x00, 0xaba0f2a2) // `FactorialOverflow()`.\\n                revert(0x1c, 0x04)\\n            }\\n            for { result := 1 } x { x := sub(x, 1) } { result := mul(result, x) }\\n        }\\n    }\\n\\n    /// @dev Returns the log2 of `x`.\\n    /// Equivalent to computing the index of the most significant bit (MSB) of `x`.\\n    /// Returns 0 if `x` is zero.\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            // forgefmt: disable-next-item\\n            r := or(r, byte(and(0x1f, shr(shr(r, x), 0x8421084210842108cc6318c6db6d54be)),\\n                0x0706060506020504060203020504030106050205030304010505030400000000))\\n        }\\n    }\\n\\n    /// @dev Returns the log2 of `x`, rounded up.\\n    /// Returns 0 if `x` is zero.\\n    function log2Up(uint256 x) internal pure returns (uint256 r) {\\n        r = log2(x);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r := add(r, lt(shl(r, 1), x))\\n        }\\n    }\\n\\n    /// @dev Returns the log10 of `x`.\\n    /// Returns 0 if `x` is zero.\\n    function log10(uint256 x) internal pure returns (uint256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if iszero(lt(x, 100000000000000000000000000000000000000)) {\\n                x := div(x, 100000000000000000000000000000000000000)\\n                r := 38\\n            }\\n            if iszero(lt(x, 100000000000000000000)) {\\n                x := div(x, 100000000000000000000)\\n                r := add(r, 20)\\n            }\\n            if iszero(lt(x, 10000000000)) {\\n                x := div(x, 10000000000)\\n                r := add(r, 10)\\n            }\\n            if iszero(lt(x, 100000)) {\\n                x := div(x, 100000)\\n                r := add(r, 5)\\n            }\\n            r := add(r, add(gt(x, 9), add(gt(x, 99), add(gt(x, 999), gt(x, 9999)))))\\n        }\\n    }\\n\\n    /// @dev Returns the log10 of `x`, rounded up.\\n    /// Returns 0 if `x` is zero.\\n    function log10Up(uint256 x) internal pure returns (uint256 r) {\\n        r = log10(x);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r := add(r, lt(exp(10, r), x))\\n        }\\n    }\\n\\n    /// @dev Returns the log256 of `x`.\\n    /// Returns 0 if `x` is zero.\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(shr(3, r), lt(0xff, shr(r, x)))\\n        }\\n    }\\n\\n    /// @dev Returns the log256 of `x`, rounded up.\\n    /// Returns 0 if `x` is zero.\\n    function log256Up(uint256 x) internal pure returns (uint256 r) {\\n        r = log256(x);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r := add(r, lt(shl(shl(3, r), 1), x))\\n        }\\n    }\\n\\n    /// @dev Returns the scientific notation format `mantissa * 10 ** exponent` of `x`.\\n    /// Useful for compressing prices (e.g. using 25 bit mantissa and 7 bit exponent).\\n    function sci(uint256 x) internal pure returns (uint256 mantissa, uint256 exponent) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mantissa := x\\n            if mantissa {\\n                if iszero(mod(mantissa, 1000000000000000000000000000000000)) {\\n                    mantissa := div(mantissa, 1000000000000000000000000000000000)\\n                    exponent := 33\\n                }\\n                if iszero(mod(mantissa, 10000000000000000000)) {\\n                    mantissa := div(mantissa, 10000000000000000000)\\n                    exponent := add(exponent, 19)\\n                }\\n                if iszero(mod(mantissa, 1000000000000)) {\\n                    mantissa := div(mantissa, 1000000000000)\\n                    exponent := add(exponent, 12)\\n                }\\n                if iszero(mod(mantissa, 1000000)) {\\n                    mantissa := div(mantissa, 1000000)\\n                    exponent := add(exponent, 6)\\n                }\\n                if iszero(mod(mantissa, 10000)) {\\n                    mantissa := div(mantissa, 10000)\\n                    exponent := add(exponent, 4)\\n                }\\n                if iszero(mod(mantissa, 100)) {\\n                    mantissa := div(mantissa, 100)\\n                    exponent := add(exponent, 2)\\n                }\\n                if iszero(mod(mantissa, 10)) {\\n                    mantissa := div(mantissa, 10)\\n                    exponent := add(exponent, 1)\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Convenience function for packing `x` into a smaller number using `sci`.\\n    /// The `mantissa` will be in bits [7..255] (the upper 249 bits).\\n    /// The `exponent` will be in bits [0..6] (the lower 7 bits).\\n    /// Use `SafeCastLib` to safely ensure that the `packed` number is small\\n    /// enough to fit in the desired unsigned integer type:\\n    /// ```\\n    ///     uint32 packed = SafeCastLib.toUint32(FixedPointMathLib.packSci(777 ether));\\n    /// ```\\n    function packSci(uint256 x) internal pure returns (uint256 packed) {\\n        (x, packed) = sci(x); // Reuse for `mantissa` and `exponent`.\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if shr(249, x) {\\n                mstore(0x00, 0xce30380c) // `MantissaOverflow()`.\\n                revert(0x1c, 0x04)\\n            }\\n            packed := or(shl(7, x), packed)\\n        }\\n    }\\n\\n    /// @dev Convenience function for unpacking a packed number from `packSci`.\\n    function unpackSci(uint256 packed) internal pure returns (uint256 unpacked) {\\n        unchecked {\\n            unpacked = (packed >> 7) * 10 ** (packed & 0x7f);\\n        }\\n    }\\n\\n    /// @dev Returns the average of `x` and `y`.\\n    function avg(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = (x & y) + ((x ^ y) >> 1);\\n        }\\n    }\\n\\n    /// @dev Returns the average of `x` and `y`.\\n    function avg(int256 x, int256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            z = (x >> 1) + (y >> 1) + (x & y & 1);\\n        }\\n    }\\n\\n    /// @dev Returns the absolute value of `x`.\\n    function abs(int256 x) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(sub(0, shr(255, x)), add(sub(0, shr(255, x)), x))\\n        }\\n    }\\n\\n    /// @dev Returns the absolute distance between `x` and `y`.\\n    function dist(int256 x, int256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(mul(xor(sub(y, x), sub(x, y)), sgt(x, y)), sub(y, x))\\n        }\\n    }\\n\\n    /// @dev Returns the minimum of `x` and `y`.\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(x, mul(xor(x, y), lt(y, x)))\\n        }\\n    }\\n\\n    /// @dev Returns the minimum of `x` and `y`.\\n    function min(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(x, mul(xor(x, y), slt(y, x)))\\n        }\\n    }\\n\\n    /// @dev Returns the maximum of `x` and `y`.\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(x, mul(xor(x, y), gt(y, x)))\\n        }\\n    }\\n\\n    /// @dev Returns the maximum of `x` and `y`.\\n    function max(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(x, mul(xor(x, y), sgt(y, x)))\\n        }\\n    }\\n\\n    /// @dev Returns `x`, bounded to `minValue` and `maxValue`.\\n    function clamp(uint256 x, uint256 minValue, uint256 maxValue)\\n        internal\\n        pure\\n        returns (uint256 z)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(x, mul(xor(x, minValue), gt(minValue, x)))\\n            z := xor(z, mul(xor(z, maxValue), lt(maxValue, z)))\\n        }\\n    }\\n\\n    /// @dev Returns `x`, bounded to `minValue` and `maxValue`.\\n    function clamp(int256 x, int256 minValue, int256 maxValue) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := xor(x, mul(xor(x, minValue), sgt(minValue, x)))\\n            z := xor(z, mul(xor(z, maxValue), slt(maxValue, z)))\\n        }\\n    }\\n\\n    /// @dev Returns greatest common divisor of `x` and `y`.\\n    function gcd(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            for { z := x } y {} {\\n                let t := y\\n                y := mod(z, y)\\n                z := t\\n            }\\n        }\\n    }\\n\\n    /*\\u00b4:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0\\u2022.*\\u2022\\u00b4.*:\\u02da.\\u00b0*.\\u02da\\u2022\\u00b4.\\u00b0:\\u00b0\\u2022.\\u00b0+.*\\u2022\\u00b4.*:*/\\n    /*                   RAW NUMBER OPERATIONS                    */\\n    /*.\\u2022\\u00b0:\\u00b0.\\u00b4+\\u02da.*\\u00b0.\\u02da:*.\\u00b4\\u2022*.+\\u00b0.\\u2022\\u00b0:\\u00b4*.\\u00b4\\u2022*.\\u2022\\u00b0.\\u2022\\u00b0:\\u00b0.\\u00b4:\\u2022\\u02da\\u00b0.*\\u00b0.\\u02da:*.\\u00b4+\\u00b0.\\u2022*/\\n\\n    /// @dev Returns `x + y`, without checking for overflow.\\n    function rawAdd(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = x + y;\\n        }\\n    }\\n\\n    /// @dev Returns `x + y`, without checking for overflow.\\n    function rawAdd(int256 x, int256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            z = x + y;\\n        }\\n    }\\n\\n    /// @dev Returns `x - y`, without checking for underflow.\\n    function rawSub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = x - y;\\n        }\\n    }\\n\\n    /// @dev Returns `x - y`, without checking for underflow.\\n    function rawSub(int256 x, int256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            z = x - y;\\n        }\\n    }\\n\\n    /// @dev Returns `x * y`, without checking for overflow.\\n    function rawMul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        unchecked {\\n            z = x * y;\\n        }\\n    }\\n\\n    /// @dev Returns `x * y`, without checking for overflow.\\n    function rawMul(int256 x, int256 y) internal pure returns (int256 z) {\\n        unchecked {\\n            z = x * y;\\n        }\\n    }\\n\\n    /// @dev Returns `x / y`, returning 0 if `y` is zero.\\n    function rawDiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := div(x, y)\\n        }\\n    }\\n\\n    /// @dev Returns `x / y`, returning 0 if `y` is zero.\\n    function rawSDiv(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := sdiv(x, y)\\n        }\\n    }\\n\\n    /// @dev Returns `x % y`, returning 0 if `y` is zero.\\n    function rawMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mod(x, y)\\n        }\\n    }\\n\\n    /// @dev Returns `x % y`, returning 0 if `y` is zero.\\n    function rawSMod(int256 x, int256 y) internal pure returns (int256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := smod(x, y)\\n        }\\n    }\\n\\n    /// @dev Returns `(x + y) % d`, return 0 if `d` if zero.\\n    function rawAddMod(uint256 x, uint256 y, uint256 d) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := addmod(x, y, d)\\n        }\\n    }\\n\\n    /// @dev Returns `(x * y) % d`, return 0 if `d` if zero.\\n    function rawMulMod(uint256 x, uint256 y, uint256 d) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            z := mulmod(x, y, d)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd890a3c47fd08d2d663890af4561045edc531ca1d7687bbf9dd7a2d1f15f1a3e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b50604051620066d2380380620066d28339810160408190526200003591620002f1565b6001600160a01b0381166200005d5760405163887efaa560e01b815260040160405180910390fd5b6001600160a01b038116608081905260408051630dfe168160e01b81529051630dfe1681916004808201926020929091908290030181865afa158015620000a8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000ce9190620003c6565b6001600160a01b031660c0816001600160a01b0316815250506080516001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000128573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200014e9190620003c6565b6001600160a01b031660e0816001600160a01b031681525050816000015182602001518360400151846060015160c05186608001518760a001516040516200019690620002c6565b6001600160a01b0397881681529587166020870152938616604086015291851660608501528416608084015290921660a082015260c081019190915260e001604051809103906000f080158015620001f2573d6000803e3d6000fd5b506001600160a01b031660a0819052604051632f2ff15d60e01b815260006004820152336024820152632f2ff15d90604401600060405180830381600087803b1580156200023f57600080fd5b505af115801562000254573d6000803e3d6000fd5b505060a05160405163d547741f60e01b8152600060048201523060248201526001600160a01b03909116925063d547741f9150604401600060405180830381600087803b158015620002a557600080fd5b505af1158015620002ba573d6000803e3d6000fd5b505050505050620003eb565b614fb6806200171c83390190565b80516001600160a01b0381168114620002ec57600080fd5b919050565b60008082840360e08112156200030657600080fd5b60c08112156200031557600080fd5b5060405160c081016001600160401b03811182821017156200034757634e487b7160e01b600052604160045260246000fd5b6040526200035584620002d4565b81526200036560208501620002d4565b60208201526200037860408501620002d4565b60408201526200038b60608501620002d4565b60608201526200039e60808501620002d4565b608082015260a084810151908201529150620003bd60c08401620002d4565b90509250929050565b600060208284031215620003d957600080fd5b620003e482620002d4565b9392505050565b60805160a05160c05160e05161129d6200047f600039600081816101620152818161030c01528181610a470152610aea015260008181610189015281816102ca0152818161043101526104f10152600081816102010152818161034e0152818161049b0152818161059c015281816106fb015261084001526000818160f4015281816102760152610966015261129d6000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806370a082311161008c5780638dc3ec4d116100665780638dc3ec4d14610223578063a217fddf14610236578063b287c5431461023e578063b6b55f251461024757600080fd5b806370a08231146101cb57806370bb45b3146101f45780637bc1ed63146101fc57600080fd5b80632cebdeb2116100c85780632cebdeb21461015d5780632f48ab7d146101845780633ccfd60b146101ab5780634c255c97146101b357600080fd5b806316f0115b146100ef57806318925c071461013357806323a69e7514610148575b600080fd5b6101167f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61013b61025a565b60405161012a9190610fbd565b61015b61015636600461100a565b61026b565b005b6101167f000000000000000000000000000000000000000000000000000000000000000081565b6101167f000000000000000000000000000000000000000000000000000000000000000081565b61015b610339565b6101bd620f424081565b60405190815260200161012a565b6101bd6101d93660046110a6565b6001600160a01b031660009081526003602052604090205490565b61015b6103c9565b6101167f000000000000000000000000000000000000000000000000000000000000000081565b61015b6102313660046110c1565b610490565b6101bd600081565b6101bd60005481565b6101bd6102553660046110f4565b610816565b606061026660016108bb565b905090565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102b457604051636f61f64160e01b815260040160405180910390fd5b60008413156102f6576102f16001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633866108cf565b610333565b6000831315610333576103336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633856108cf565b50505050565b6040516351cff8d960e01b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906351cff8d990602401600060405180830381600087803b15801561039a57600080fd5b505af11580156103ae573d6000803e3d6000fd5b505050506103c633600161092690919063ffffffff16565b50565b33600090815260036020526040812054908190036103fa5760405163887efaa560e01b815260040160405180910390fd5b3360009081526003602052604081208190558054829190819061041e908490611123565b9091555061045890506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633836108cf565b60405181815233907fe8354b169cd993d5cdfad1036a9a3f1ea7ed77e430bccb279200fd088243f5959060200160405180910390a250565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104d95760405163068690bf60e11b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610540573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105649190611136565b905060005481116105885760405163887efaa560e01b815260040160405180910390fd5b600080546105969083611123565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061c9190611136565b90508060000361066c5761063182858861093b565b6040518281527f6d1c76d614228b523baa4dcd9539e2c713b54ff4ab3ff2d1627e7f6cd32be4429060200160405180910390a1505050505050565b600061067c8387620f4240610b11565b905061068981868961093b565b6106938184611123565b925060006106a16001610b26565b9050836000808282546106b4919061114f565b90915550600090505b818110156107cf5760006106d2600183610b30565b6040516370a0823160e01b81526001600160a01b038281166004830152919250600091610772917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa158015610744573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107689190611136565b620f424088610b11565b905060006107848883620f4240610b11565b905080600003610796575050506107c7565b6001600160a01b038316600090815260036020526040812080548392906107be90849061114f565b90915550505050505b6001016106bd565b507f6d1c76d614228b523baa4dcd9539e2c713b54ff4ab3ff2d1627e7f6cd32be4426107fb838661114f565b60405190815260200160405180910390a15050505050505050565b6000610823600133610b3c565b50604051636e553f6560e01b8152600481018390523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636e553f65906044016020604051808303816000875af1158015610891573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b59190611136565b92915050565b606060006108c883610b51565b9392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610921908490610bad565b505050565b60006108c8836001600160a01b038416610c87565b8260000361095c5760405163887efaa560e01b815260040160405180910390fd5b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663128acb083060018661099e6401000276a383611162565b60405160e086901b6001600160e01b03191681526001600160a01b03948516600482015292151560248401526044830191909152909116606482015260a06084820152600060a482015260c40160408051808303816000875af1158015610a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2d9190611182565b50506040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610a96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aba9190611136565b905082811015610add5760405163569d45cf60e11b815260040160405180910390fd5b6103336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001683836108cf565b6000610b1e848484610d81565b949350505050565b60006108b5825490565b60006108c88383610e21565b60006108c8836001600160a01b038416610e4b565b606081600001805480602002602001604051908101604052809291908181526020018280548015610ba157602002820191906000526020600020905b815481526020019060010190808311610b8d575b50505050509050919050565b6000610c02826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610e9a9092919063ffffffff16565b9050805160001480610c23575080806020019051810190610c2391906111a6565b6109215760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b60008181526001830160205260408120548015610d70576000610cab600183611123565b8554909150600090610cbf90600190611123565b9050818114610d24576000866000018281548110610cdf57610cdf6111c8565b9060005260206000200154905080876000018481548110610d0257610d026111c8565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610d3557610d356111de565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506108b5565b60009150506108b5565b5092915050565b8282026000198385098181108201900380610db25782610da95763ae47f7026000526004601cfd5b508190046108c8565b808311610dc75763ae47f7026000526004601cfd5b82848609600084810385169485900494848311909303908390038390046001010292030417600260038302811880840282030280840282030280840282030280840282030280840282030280840290910302029392505050565b6000826000018281548110610e3857610e386111c8565b9060005260206000200154905092915050565b6000818152600183016020526040812054610e92575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556108b5565b5060006108b5565b6060610b1e848460008585600080866001600160a01b03168587604051610ec19190611218565b60006040518083038185875af1925050503d8060008114610efe576040519150601f19603f3d011682016040523d82523d6000602084013e610f03565b606091505b5091509150610f1487838387610f1f565b979650505050505050565b60608315610f8e578251600003610f87576001600160a01b0385163b610f875760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c7e565b5081610b1e565b610b1e8383815115610fa35781518083602001fd5b8060405162461bcd60e51b8152600401610c7e9190611234565b6020808252825182820181905260009190848201906040850190845b81811015610ffe5783516001600160a01b031683529284019291840191600101610fd9565b50909695505050505050565b6000806000806060858703121561102057600080fd5b8435935060208501359250604085013567ffffffffffffffff8082111561104657600080fd5b818701915087601f83011261105a57600080fd5b81358181111561106957600080fd5b88602082850101111561107b57600080fd5b95989497505060200194505050565b80356001600160a01b03811681146110a157600080fd5b919050565b6000602082840312156110b857600080fd5b6108c88261108a565b6000806000606084860312156110d657600080fd5b6110df8461108a565b95602085013595506040909401359392505050565b60006020828403121561110657600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156108b5576108b561110d565b60006020828403121561114857600080fd5b5051919050565b808201808211156108b5576108b561110d565b6001600160a01b03818116838216019080821115610d7a57610d7a61110d565b6000806040838503121561119557600080fd5b505080516020909101519092909150565b6000602082840312156111b857600080fd5b815180151581146108c857600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60005b8381101561120f5781810151838201526020016111f7565b50506000910152565b6000825161122a8184602087016111f4565b9190910192915050565b60208152600082518060208401526112538160408501602087016111f4565b601f01601f1916919091016040019291505056fea2646970667358221220b256024d6a23b98168735c5a5b95114b2428c297d96b6ed874f8827d3159b97664736f6c634300081800336101c0604052612710600b55678ac7230489e80000600c553480156200002457600080fd5b5060405162004fb638038062004fb68339810160408190526200004791620004bc565b604080518082018252600f81526e2837b9b4ba34b7b726b0b730b3b2b960891b60208083019190915282518084019093526002835261504d60f01b9083015260016003559060076200009a8382620005ef565b506008620000a98282620005ef565b5050506001600160a01b0387161580620000ca57506001600160a01b038616155b80620000dd57506001600160a01b038316155b80620000f057506001600160a01b038216155b80620000fe5750620f424081115b8062000108575080155b806200012e57506001600160a01b0385161580156200012e57506001600160a01b038416155b156200014d5760405163b4fa3fb360e01b815260040160405180910390fd5b6001600160a01b0380881660a05286811660c081905286821660e0529085166101205260408051630dfe168160e01b81529051630dfe1681916004808201926020929091908290030181865afa158015620001ac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001d29190620006bb565b6001600160a01b0316610180816001600160a01b03168152505060c0516001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200022d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002539190620006bb565b6001600160a01b039081166101a052838116608052600980546001600160a01b031916918416919091179055600a819055336101608190526200029990600090620003eb565b60e0516001600160a01b0316158015906200032b5750826001600160a01b031660e0516001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002fa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003209190620006bb565b6001600160a01b0316145b156200033d57600161010052620003de565b610120516001600160a01b031615801590620003d15750826001600160a01b0316610120516001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015620003a0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003c69190620006bb565b6001600160a01b0316145b15620003de576001610140525b50505050505050620006e0565b620003f78282620003fb565b5050565b60008281526002602090815260408083206001600160a01b038516845290915290205460ff16620003f75760008281526002602090815260408083206001600160a01b03851684529091529020805460ff191660011790556200045b3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b80516001600160a01b0381168114620004b757600080fd5b919050565b600080600080600080600060e0888a031215620004d857600080fd5b620004e3886200049f565b9650620004f3602089016200049f565b955062000503604089016200049f565b945062000513606089016200049f565b935062000523608089016200049f565b92506200053360a089016200049f565b915060c0880151905092959891949750929550565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200057357607f821691505b6020821081036200059457634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620005ea576000816000526020600020601f850160051c81016020861015620005c55750805b601f850160051c820191505b81811015620005e657828155600101620005d1565b5050505b505050565b81516001600160401b038111156200060b576200060b62000548565b62000623816200061c84546200055e565b846200059a565b602080601f8311600181146200065b5760008415620006425750858301515b600019600386901b1c1916600185901b178555620005e6565b600085815260208120601f198616915b828110156200068c578886015182559484019460019091019084016200066b565b5085821015620006ab5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600060208284031215620006ce57600080fd5b620006d9826200049f565b9392505050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516147346200088260003960008181610fd201528181611a1001528181611b020152611f91015260008181610f98015281816119b601528181611ac80152611f0e015260008181610e8f015281816112820152818161150a0152611d930152600081816113bf015281816113e001528181612d6e0152612d90015260008181610955015281816113910152818161167001528181611cf20152612d400152600081816114620152818161148301528181612ce60152612d08015260008181610920015281816114340152818161163101528181611d4e0152612cb80152600081816108ec01528181611938015281816119d801528181611a3201528181611a7701528181611e6e01528181612123015281816121b4015281816122c70152818161233801528181613720015281816137dd01526138b401526000612bb40152600081816103b901528181610c5a01528181611069015281816110fd01528181611578015281816117f201528181611dc60152613c3a01526147346000f3fe608060405234801561001057600080fd5b50600436106102745760003560e01c806358829f4e1161015157806399eee9d0116100c3578063b3f0067411610087578063b3f006741461056c578063b4f2e8b81461057f578063d547741f14610592578063dd62ed3e146105a5578063ec87621c146105b8578063f0fa55a9146105cd57600080fd5b806399eee9d014610516578063a217fddf14610529578063a457c2d714610531578063a9059cbb14610544578063aaf5eb681461055757600080fd5b806367b9a2861161011557806367b9a286146104a45780636e553f65146104ac57806370a08231146104bf57806391d14854146104e857806395d89b41146104fb57806398ee1e401461050357600080fd5b806358829f4e1461046e57806359974e38146104765780635c8d7ea314610489578063645006ca1461049257806367a527931461049b57600080fd5b80632ce29dd8116101ea57806336568abe116101ae57806336568abe146103fd578063371165661461041057806339509351146104345780634c255c971461044757806351cff8d914610451578063558e44d31461046457600080fd5b80632ce29dd81461038e5780632f2ff15d146103a15780632f48ab7d146103b4578063313ce567146103db57806336309923146103ea57600080fd5b806316fed3e21161023c57806316fed3e2146102ff57806318160ddd1461032a57806323a69e751461033257806323b872dd14610345578063248a9ca3146103585780632a80cda31461037b57600080fd5b806301ffc9a71461027957806306fdde03146102a1578063085107bd146102b657806308dabe2d146102cb578063095ea7b3146102ec575b600080fd5b61028c610287366004613f5a565b6105e0565b60405190151581526020015b60405180910390f35b6102a9610617565b6040516102989190613fa8565b6102c96102c4366004613fea565b6106a9565b005b6102de6102d9366004614023565b6107f1565b604051908152602001610298565b61028c6102fa366004614064565b6108c9565b600954610312906001600160a01b031681565b6040516001600160a01b039091168152602001610298565b6006546102de565b6102c96103403660046140d2565b6108e1565b61028c610353366004614125565b610a6d565b6102de610366366004614166565b60009081526002602052604090206001015490565b6102c9610389366004614166565b610a91565b6102c961039c366004614064565b610ad9565b6102c96103af36600461417f565b610b7e565b6103127f000000000000000000000000000000000000000000000000000000000000000081565b60405160128152602001610298565b6102c96103f8366004613fea565b610ba8565b6102c961040b36600461417f565b610ddf565b600d5460408051600283810b8252630100000090930490920b602083015201610298565b61028c610442366004614064565b610e62565b6102de620f424081565b6102c961045f3660046141a4565b610e84565b6102de620186a081565b6102c9611182565b6102c9610484366004614166565b611236565b6102de600a5481565b6102de600c5481565b6102de60005481565b6102c96112e4565b6102de6104ba36600461417f565b6114fd565b6102de6104cd3660046141a4565b6001600160a01b031660009081526004602052604090205490565b61028c6104f636600461417f565b6118f3565b6102a961191e565b6102c96105113660046141d7565b61192d565b6102c96105243660046140d2565b611a6c565b6102de600081565b61028c61053f366004614064565b611b29565b61028c610552366004614064565b611ba4565b6102de6a0c097ce7bc90715b34b9f160241b81565b600154610312906001600160a01b031681565b6102c961058d36600461417f565b611bb2565b6102c96105a036600461417f565b611bc7565b6102de6105b336600461429b565b611bec565b6102de6000805160206146df83398151915281565b6102c96105db366004614166565b611c17565b60006001600160e01b03198216637965db0b60e01b148061061157506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060078054610626906142c9565b80601f0160208091040260200160405190810160405280929190818152602001828054610652906142c9565b801561069f5780601f106106745761010080835404028352916020019161069f565b820191906000526020600020905b81548152906001019060200180831161068257829003601f168201915b5050505050905090565b6000805160206146df8339815191526106c181611c7b565b600d5463010000008104600290810b91900b036106f15760405163887efaa560e01b815260040160405180910390fd5b8160020b8360020b13156107185760405163b4fa3fb360e01b815260040160405180910390fd5b610720611c85565b600d5461074e90600281810b9163010000009004900b610749828261074460065490565b611df8565b611e2f565b600d805462ffffff84811663010000000265ffffffffffff199092169086161717905560008061077c611eec565b91509150600061078a61200a565b905061079783838361205b565b61079f612203565b600d5460408051600283810b8252630100000090930490920b60208301527f5c00336af6a6440e3e537aaa4ed6ae355ac541c5c5552eadcdb0509847e7bf8891015b60405180910390a1505050505050565b60008060006107fe612333565b91509150600061080d826123c7565b600d549091506000906108229060020b6123c7565b600d5490915060009061083e906301000000900460020b6123c7565b9050600061084d86838c612688565b9050600061085c84888c6126c7565b905061087385858561086e8587614313565b6126ee565b909b50995060006108938b6a0c097ce7bc90715b34b9f160241b8c612774565b90506108b78c6a0c097ce7bc90715b34b9f160241b6108b2848361433a565b612774565b985050505050505050505b9392505050565b6000336108d7818585612781565b5060019392505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015906109435750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b80156109785750336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614155b1561099657604051636f61f64160e01b815260040160405180910390fd5b6000841315610a1b57610a163385336001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a06919061434d565b6001600160a01b031691906128a5565b610a67565b6000831315610a6757610a673384336001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109e2573d6000803e3d6000fd5b50505050565b600033610a7b858285612908565b610a8685858561297c565b506001949350505050565b6000610a9c81611c7b565b600c8290556040518281527fb443c8bd39a1b60d415144f9148c6f90c2b68a553eb90c62cef5e44979db009d906020015b60405180910390a15050565b6000610ae481611c7b565b620f4240821180610af3575081155b80610b0557506001600160a01b038316155b15610b235760405163b4fa3fb360e01b815260040160405180910390fd5b600980546001600160a01b0319166001600160a01b038516908117909155600a8390556040518381527f8b4e25f78db7bb77acd8a3072d822f125bc92a3fb812b4aba0cc8e42b343fbfb9060200160405180910390a2505050565b600082815260026020526040902060010154610b9981611c7b565b610ba38383612b27565b505050565b6000805160206146df833981519152610bc081611c7b565b600d54600281810b6301000000909204900b14610bf05760405163887efaa560e01b815260040160405180910390fd5b8160020b8360020b1315610c175760405163b4fa3fb360e01b815260040160405180910390fd5b600d805462ffffff84811663010000000265ffffffffffff1990921690861617179055610c42611c85565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610ca9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccd919061436a565b905080600003610cf05760405163887efaa560e01b815260040160405180910390fd5b60006a0c097ce7bc90715b34b9f160241b610d09612bad565b610d139190614383565b90506000610d1f61200a565b90506000610d4984610d436305f5e1006a0c097ce7bc90715b34b9f160241b614383565b85612774565b90506000610d66826a0c097ce7bc90715b34b9f160241b85612774565b90506000610d758284866107f1565b9050610d8386868684612c79565b610d8b612203565b600d5460408051600283810b8252630100000090930490920b60208301527fe30a3a20c150aff70e34005196196ece9115a2e4b22bc7bdd9a469777aa821d8910160405180910390a1505050505050505050565b6001600160a01b0381163314610e545760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610e5e8282612dbe565b5050565b6000336108d7818585610e758383611bec565b610e7f919061433a565b612781565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610ecd5760405163887efaa560e01b815260040160405180910390fd5b610ed5612e25565b6001600160a01b03811660009081526004602052604081205490819003610f0f57604051631e9acf1760e31b815260040160405180910390fd5b600d54600281810b6301000000909204900b1461105157610f2e611c85565b600d54610f5290600281810b9163010000009004900b610749828261074460065490565b600080610f5d611eec565b915091506000610f7183856108b260065490565b90506000610f8383866108b260065490565b90508115610fbf57610fbf6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001687846128a5565b8015610ff957610ff96001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001687836128a5565b8461100360065490565b0361101c57600d805465ffffffffffff19169055611048565b611040611029838661439a565b611033838661439a565b61103b61200a565b61205b565b611048612203565b50505050611127565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156110b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110dc919061436a565b905060006110ee82846108b260065490565b90506111246001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001685836128a5565b50505b6111318282612e7e565b816001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243648260405161116c91815260200190565b60405180910390a25061117f6001600355565b50565b600d5463010000008104600290810b91900b036111b25760405163887efaa560e01b815260040160405180910390fd5b6111ba611c85565b6000806111c5611eec565b9150915060006111d361200a565b90506111e083838361205b565b6111e8612203565b600d5460408051600283810b8252630100000090930490920b60208301527fe30a3a20c150aff70e34005196196ece9115a2e4b22bc7bdd9a469777aa821d8910160405180910390a1505050565b6000805160206146df83398151915261124e81611c7b565b600954600a54604051638dc3ec4d60e01b81526001600160a01b0392831660048201526024810191909152604481018490527f000000000000000000000000000000000000000000000000000000000000000090911690638dc3ec4d90606401600060405180830381600087803b1580156112c857600080fd5b505af11580156112dc573d6000803e3d6000fd5b505050505050565b6000805160206146df8339815191526112fc81611c7b565b600d5463010000008104600290810b91900b0361132c5760405163b4fa3fb360e01b815260040160405180910390fd5b611334611c85565b600d5461135890600281810b9163010000009004900b610749828261074460065490565b600080611363611eec565b9150915060006a0c097ce7bc90715b34b9f160241b611380612bad565b61138a9190614383565b90506114057f0000000000000000000000000000000000000000000000000000000000000000836113bd85856001612fb2565b7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000015613031565b50600061141061200a565b9050600061142d85836a0c097ce7bc90715b34b9f160241b612774565b90506114a87f00000000000000000000000000000000000000000000000000000000000000008661146084876001612fb2565b7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000015613031565b50600d805465ffffffffffff19169081905560408051600283810b8252630100000090930490920b60208301527f0627c11bf779f1f1e577095c4de0dc8c2713310e83e22e3bc777291a6bff6a6491016107e1565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146115485760405163887efaa560e01b815260040160405180910390fd5b600c5483101561156b5760405163b4fa3fb360e01b815260040160405180910390fd5b6115a06001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168330866134c6565b6115a9836134fe565b925060006a0c097ce7bc90715b34b9f160241b6115c4612bad565b6115ce9190614383565b600d54909150600281810b6301000000909204900b146117a4576115f0611c85565b600d5461161490600281810b9163010000009004900b610749828261074460065490565b60008061161f611eec565b91509150600061162d61200a565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661166e57611667878461439a565b92506116a9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166116a9576116a6878361439a565b91505b6000826116c585846a0c097ce7bc90715b34b9f160241b612774565b6116cf919061433a565b905060006116f9896116f36305f5e1006a0c097ce7bc90715b34b9f160241b614383565b88612774565b905061170e8161170860065490565b84612774565b965061171b85858561205b565b61172361200a565b925061172d611eec565b90955093508361174c86856a0c097ce7bc90715b34b9f160241b612774565b611756919061433a565b91506000611773836a0c097ce7bc90715b34b9f160241b86612774565b905060006117828285876107f1565b90506117908b898784612c79565b611798612203565b5050505050505061189e565b6117bd84826a0c097ce7bc90715b34b9f160241b612774565b915060006117ca60065490565b111561189e576040516370a0823160e01b815230600482015260009085906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185d919061436a565b611867919061439a565b9050600061188482846a0c097ce7bc90715b34b9f160241b612774565b90506118998461189360065490565b83612774565b935050505b6118a88383613526565b60408051838152602081018690526001600160a01b038516917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15910160405180910390a25092915050565b60009182526002602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060088054610626906142c9565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461197657604051636f61f64160e01b815260040160405180910390fd5b600d546601000000000000900460ff166119a35760405163887efaa560e01b815260040160405180910390fd5b82156119fd576119fd6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000856128a5565b8115611a5757611a576001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000846128a5565b5050600d805466ff0000000000001916905550565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611ab557604051636f61f64160e01b815260040160405180910390fd5b8315611aef57611aef6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633866128a5565b8215610a6757610a676001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633856128a5565b60003381611b378286611bec565b905083811015611b975760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610e4b565b610a868286868403612781565b6000336108d781858561297c565b6000611bbd81611c7b565b610ba383836135e7565b600082815260026020526040902060010154611be281611c7b565b610ba38383612dbe565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205490565b6000611c2281611c7b565b620f4240821115611c465760405163b4fa3fb360e01b815260040160405180910390fd5b600b8290556040518281527ff5a802650e0a86db227cc342f06327d2ca0ff5cf2b12e0084fc5d8a7db2c54fd90602001610acd565b61117f8133613665565b600080611c90611eec565b91509150611c9c6136be565b600080611ca7611eec565b90925090506000611cb8858461439a565b90506000611cc6858461439a565b905060006a0c097ce7bc90715b34b9f160241b611ce1612bad565b611ceb9190614383565b9050611d1e7f0000000000000000000000000000000000000000000000000000000000000000836113bd85856001612fb2565b91506000611d2a61200a565b90506000611d4785836a0c097ce7bc90715b34b9f160241b612774565b9050611d7a7f00000000000000000000000000000000000000000000000000000000000000008661146084876001612fb2565b94506000611d88858761433a565b1115611ded57611ded7f0000000000000000000000000000000000000000000000000000000000000000611dbc868861433a565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906128a5565b505050505050505050565b600080611e058585613851565b9050611e26611e21826001600160801b0316856108b260065490565b613934565b95945050505050565b6001600160801b03811615610ba35760405163a34123a760e01b8152600284810b600483015283900b60248201526001600160801b03821660448201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a34123a79060640160408051808303816000875af1158015611ebe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee291906143ad565b5050610ba36136be565b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611f55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f79919061436a565b6040516370a0823160e01b81523060048201529092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611fe0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612004919061436a565b90509091565b600080612015612333565b9150506000612023826123c7565b905061205461203b6001600160a01b03831680614383565b6a0c097ce7bc90715b34b9f160241b600160c01b612774565b9250505090565b600083612077846a0c097ce7bc90715b34b9f160241b85612774565b612081919061433a565b905060008361209f86856a0c097ce7bc90715b34b9f160241b612774565b6120a9919061433a565b905060006120b88383866107f1565b905060006120d5866a0c097ce7bc90715b34b9f160241b85612774565b6120ed906a0c097ce7bc90715b34b9f160241b61439a565b90508181111561216c57600061211285846a0c097ce7bc90715b34b9f160241b612774565b61211c908961439a565b90506121657f00000000000000000000000000000000000000000000000000000000000000008261215c816121556305f5e1008c614383565b6001612fb2565b60016000613031565b50506121fa565b6000612186836a0c097ce7bc90715b34b9f160241b61439a565b905060006121a385836a0c097ce7bc90715b34b9f160241b612774565b6121ad908961439a565b90506121f67f0000000000000000000000000000000000000000000000000000000000000000826121ed816121e66305f5e1008d614383565b6000612fb2565b60006001613031565b5050505b50505050505050565b60008061220e611eec565b91509150600061221c612333565b50600d549091506000906122559083906122389060020b6123c7565b600d5461224e906301000000900460020b6123c7565b8787613951565b600d805466ff000000000000191666010000000000001790819055604051633c8a7d8d60e01b8152306004820152600282810b6024830152630100000090920490910b60448201526001600160801b038216606482015260a06084820152600060a48201529091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633c8a7d8d9060c40160408051808303816000875af115801561230f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112dc91906143ad565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa158015612394573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123b891906143f8565b50949793965092945050505050565b60008160ff81901d80820118620d89e88111156123f6576308c379a0600052602080526101546041526045601cfd5b7001fffcb933bd6fad37aa2d162d1a5940016001821602600160801b186002821615612432576ffff97272373d413259a46990580e213a0260801c5b6004821615612451576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615612470576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b601082161561248f576fffcb9843d60f6159c9db58835c9266440260801c5b60208216156124ae576fff973b41fa98c081472e6896dfb254c00260801c5b60408216156124cd576fff2ea16466c96a3843ec78b326b528610260801c5b60808216156124ec576ffe5dee046a99a2a811c461f1969c30530260801c5b61010082161561250c576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b61020082161561252c576ff987a7253ac413176f2b074cf7815e540260801c5b61040082161561254c576ff3392b0822b70005940c7a398e4b70f30260801c5b61080082161561256c576fe7159475a2c29b7443b29c7fa6e889d90260801c5b61100082161561258c576fd097f3bdfd2022b8845ad8f792aa58250260801c5b6120008216156125ac576fa9f746462d870fdf8a65dc1f90e061e50260801c5b6140008216156125cc576f70d869a156d2a1b890bb3df62baf32f70260801c5b6180008216156125ec576f31be135f97d08fd981231505542fcfa60260801c5b6201000082161561260d576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b6202000082161561262d576e5d6af8dedb81196699c329225ee6040260801c5b6204000082161561264c576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615612669576b048a170391f7dc42444e8fa20260801c5b600085131561267757600019045b63ffffffff0160201c949350505050565b6000806126a7856001600160a01b0316856001600160a01b03166139e6565b9050611e266126c284838888036001600160a01b0316612774565b613a24565b60006126e66126c283600160601b8787036001600160a01b0316612774565b949350505050565b6000806126fb8585613a36565b90955093506001600160a01b03808616908716116127255761271e858585613a4c565b915061276b565b836001600160a01b0316866001600160a01b03161161275d57612749868585613a4c565b9150612756858785613a8e565b905061276b565b612768858585613a8e565b90505b94509492505050565b60006126e6848484613aae565b6001600160a01b0383166127e35760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610e4b565b6001600160a01b0382166128445760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610e4b565b6001600160a01b0383811660008181526005602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6040516001600160a01b038316602482015260448101829052610ba390849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613b4e565b60006129148484611bec565b90506000198114610a67578181101561296f5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610e4b565b610a678484848403612781565b6001600160a01b0383166129e05760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610e4b565b6001600160a01b038216612a425760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610e4b565b6001600160a01b03831660009081526004602052604090205481811015612aba5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610e4b565b6001600160a01b0380851660008181526004602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90612b1a9086815260200190565b60405180910390a3610a67565b612b3182826118f3565b610e5e5760008281526002602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612b693390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015612c10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3491906144a8565b50935050925050600082131580612c55575080612c536104b04261439a565b115b15612c735760405163b4fa3fb360e01b815260040160405180910390fd5b50919050565b6000612c9485836a0c097ce7bc90715b34b9f160241b612774565b90506000612cb185856a0c097ce7bc90715b34b9f160241b612774565b9050612d2c7f000000000000000000000000000000000000000000000000000000000000000083612ce485856000612fb2565b7f0000000000000000000000000000000000000000000000000000000000000000157f0000000000000000000000000000000000000000000000000000000000000000613031565b506000612d39838861439a565b9050612db47f000000000000000000000000000000000000000000000000000000000000000082612d6c848a6000612fb2565b7f0000000000000000000000000000000000000000000000000000000000000000157f0000000000000000000000000000000000000000000000000000000000000000613031565b5050505050505050565b612dc882826118f3565b15610e5e5760008281526002602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600260035403612e775760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610e4b565b6002600355565b6001600160a01b038216612ede5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610e4b565b6001600160a01b03821660009081526004602052604090205481811015612f525760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610e4b565b6001600160a01b03831660008181526004602090815260408083208686039055600680548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b6000808215612fea576305f5e100612fd986866a0c097ce7bc90715b34b9f160241b612774565b612fe391906144f8565b9050613013565b6130108561300a6305f5e1006a0c097ce7bc90715b34b9f160241b614383565b86612774565b90505b611e2681600b54620f4240613028919061439a565b620f4240612774565b6000806001600160a01b0387161580613048575085155b156130565785915050611e26565b831561312f57866001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561309a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130be919061434d565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015613104573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613128919061436a565b90506131fe565b866001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561316d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613191919061434d565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa1580156131d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131fb919061436a565b90505b866001600160a01b031663128acb083086898761322a576132256401000276a3600161451a565b613249565b613249600173fffd8963efd1fc6a506488495d951d5263988d2661453a565b60405160e086901b6001600160e01b03191681526001600160a01b03948516600482015292151560248401526044830191909152909116606482015260a06084820152600060a482015260c40160408051808303816000875af11580156132b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132d891906143ad565b5050600084156133c05781886001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015613321573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613345919061434d565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa15801561338b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133af919061436a565b6133b9919061439a565b905061349a565b81886001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156133ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613423919061434d565b6040516370a0823160e01b81523060048201526001600160a01b0391909116906370a0823190602401602060405180830381865afa158015613469573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061348d919061436a565b613497919061439a565b90505b858110156134bb5760405163569d45cf60e11b815260040160405180910390fd5b979650505050505050565b6040516001600160a01b0380851660248301528316604482015260648101829052610a679085906323b872dd60e01b906084016128d1565b60008061351183600054620f4240612774565b905061351c81613c23565b6108c2818461439a565b6001600160a01b03821661357c5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610e4b565b806006600082825461358e919061433a565b90915550506001600160a01b0382166000818152600460209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b620186a082111561360b5760405163887efaa560e01b815260040160405180910390fd5b6000829055600180546001600160a01b0319166001600160a01b0383169081179091556040805184815260208101929092527fb2d190129c7f8c6952e604fc184b8aa257a6a1bcfc8d2b934242892af9f61cdc9101610acd565b61366f82826118f3565b610e5e5761367c81613c99565b613687836020613cab565b60405160200161369892919061455a565b60408051601f198184030181529082905262461bcd60e51b8252610e4b91600401613fa8565b600d546000906136dc90600281810b9163010000009004900b613851565b90506001600160801b0381161561379757600d5460405163a34123a760e01b8152600282810b6004830152630100000090920490910b6024820152600060448201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a34123a79060640160408051808303816000875af1158015613770573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061379491906143ad565b50505b600d546040516309e3d67b60e31b8152306004820152600282810b6024830152630100000090920490910b60448201526001600160801b036064820181905260848201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634f1eb3d89060a40160408051808303816000875af115801561382d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba391906145e6565b6040516bffffffffffffffffffffffff193060601b16602082015260e883811b603483015282901b60378201526000908190603a0160408051808303601f1901815290829052805160209091012063514ea4bf60e01b82526004820181905291507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063514ea4bf9060240160a060405180830381865afa158015613903573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139279190614619565b5092979650505050505050565b60006001600160801b0382111561394d5761394d614664565b5090565b600061395d8585613a36565b90955093506001600160a01b038086169087161161398757613980858585612688565b9050611e26565b836001600160a01b0316866001600160a01b031610156139d15760006139ae878686612688565b905060006139bd8789866126c7565b905081811081831802821892505050611e26565b6139dc8585846126c7565b9695505050505050565b600082820260001983850981811082019003600160601b8110613a115763ae47f7026000526004601cfd5b8060a01b8260601c179250505092915050565b6000600160801b821061394d57600080fd5b80821882821002918218911881815b9250929050565b60006126e6846001600160a01b0316613a8a606060ff16856001600160801b0316901b8787036001600160a01b0316876001600160a01b0316612774565b0490565b60006126e6826001600160801b03168585036001600160a01b03166139e6565b8282026000198385098181108201900380613adf5782613ad65763ae47f7026000526004601cfd5b508190046108c2565b808311613af45763ae47f7026000526004601cfd5b82848609600084810385169485900494848311909303908390038390046001010292030417600260038302811880840282030280840282030280840282030280840282030280840282030280840290910302029392505050565b6000613ba3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613e479092919063ffffffff16565b9050805160001480613bc4575080806020019051810190613bc4919061467a565b610ba35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610e4b565b801561117f57600154613c63906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169116836128a5565b6040518181527fccac4111799e8a37144a6ae9e90ea146dcd86f34f155783a8ce97c546ad8c2fe9060200160405180910390a150565b60606106116001600160a01b03831660145b60606000613cba836002614383565b613cc590600261433a565b67ffffffffffffffff811115613cdd57613cdd6141c1565b6040519080825280601f01601f191660200182016040528015613d07576020820181803683370190505b509050600360fc1b81600081518110613d2257613d22614695565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613d5157613d51614695565b60200101906001600160f81b031916908160001a9053506000613d75846002614383565b613d8090600161433a565b90505b6001811115613df8576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110613db457613db4614695565b1a60f81b828281518110613dca57613dca614695565b60200101906001600160f81b031916908160001a90535060049490941c93613df1816146ab565b9050613d83565b5083156108c25760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610e4b565b60606126e6848460008585600080866001600160a01b03168587604051613e6e91906146c2565b60006040518083038185875af1925050503d8060008114613eab576040519150601f19603f3d011682016040523d82523d6000602084013e613eb0565b606091505b50915091506134bb8783838760608315613f2b578251600003613f24576001600160a01b0385163b613f245760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610e4b565b50816126e6565b6126e68383815115613f405781518083602001fd5b8060405162461bcd60e51b8152600401610e4b9190613fa8565b600060208284031215613f6c57600080fd5b81356001600160e01b0319811681146108c257600080fd5b60005b83811015613f9f578181015183820152602001613f87565b50506000910152565b6020815260008251806020840152613fc7816040850160208701613f84565b601f01601f19169190910160400192915050565b8060020b811461117f57600080fd5b60008060408385031215613ffd57600080fd5b823561400881613fdb565b9150602083013561401881613fdb565b809150509250929050565b60008060006060848603121561403857600080fd5b505081359360208301359350604090920135919050565b6001600160a01b038116811461117f57600080fd5b6000806040838503121561407757600080fd5b82356140828161404f565b946020939093013593505050565b60008083601f8401126140a257600080fd5b50813567ffffffffffffffff8111156140ba57600080fd5b602083019150836020828501011115613a4557600080fd5b600080600080606085870312156140e857600080fd5b8435935060208501359250604085013567ffffffffffffffff81111561410d57600080fd5b61411987828801614090565b95989497509550505050565b60008060006060848603121561413a57600080fd5b83356141458161404f565b925060208401356141558161404f565b929592945050506040919091013590565b60006020828403121561417857600080fd5b5035919050565b6000806040838503121561419257600080fd5b8235915060208301356140188161404f565b6000602082840312156141b657600080fd5b81356108c28161404f565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156141ec57600080fd5b8335925060208401359150604084013567ffffffffffffffff8082111561421257600080fd5b818601915086601f83011261422657600080fd5b813581811115614238576142386141c1565b604051601f8201601f19908116603f01168101908382118183101715614260576142606141c1565b8160405282815289602084870101111561427957600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b600080604083850312156142ae57600080fd5b82356142b98161404f565b915060208301356140188161404f565b600181811c908216806142dd57607f821691505b602082108103612c7357634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6001600160801b03818116838216019080821115614333576143336142fd565b5092915050565b80820180821115610611576106116142fd565b60006020828403121561435f57600080fd5b81516108c28161404f565b60006020828403121561437c57600080fd5b5051919050565b8082028115828204841417610611576106116142fd565b81810381811115610611576106116142fd565b600080604083850312156143c057600080fd5b505080516020909101519092909150565b805161ffff811681146143e357600080fd5b919050565b805180151581146143e357600080fd5b600080600080600080600060e0888a03121561441357600080fd5b875161441e8161404f565b602089015190975061442f81613fdb565b955061443d604089016143d1565b945061444b606089016143d1565b9350614459608089016143d1565b925060a088015163ffffffff8116811461447257600080fd5b915061448060c089016143e8565b905092959891949750929550565b805169ffffffffffffffffffff811681146143e357600080fd5b600080600080600060a086880312156144c057600080fd5b6144c98661448e565b94506020860151935060408601519250606086015191506144ec6080870161448e565b90509295509295909350565b60008261451557634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b03818116838216019080821115614333576143336142fd565b6001600160a01b03828116828216039080821115614333576143336142fd565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614592816017850160208801613f84565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516145c3816028840160208801613f84565b01602801949350505050565b80516001600160801b03811681146143e357600080fd5b600080604083850312156145f957600080fd5b614602836145cf565b9150614610602084016145cf565b90509250929050565b600080600080600060a0868803121561463157600080fd5b61463a866145cf565b94506020860151935060408601519250614656606087016145cf565b91506144ec608087016145cf565b634e487b7160e01b600052600160045260246000fd5b60006020828403121561468c57600080fd5b6108c2826143e8565b634e487b7160e01b600052603260045260246000fd5b6000816146ba576146ba6142fd565b506000190190565b600082516146d4818460208701613f84565b919091019291505056fef33d40e6c84e251a3e1cff80c569d5646a4f006b85649b53b993dadc59eb3748a2646970667358221220a18d5a96ef9a3a20f4913ba44bf745124c5ac906cd910b678aac1ae2849698a964736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c806370a082311161008c5780638dc3ec4d116100665780638dc3ec4d14610223578063a217fddf14610236578063b287c5431461023e578063b6b55f251461024757600080fd5b806370a08231146101cb57806370bb45b3146101f45780637bc1ed63146101fc57600080fd5b80632cebdeb2116100c85780632cebdeb21461015d5780632f48ab7d146101845780633ccfd60b146101ab5780634c255c97146101b357600080fd5b806316f0115b146100ef57806318925c071461013357806323a69e7514610148575b600080fd5b6101167f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61013b61025a565b60405161012a9190610fbd565b61015b61015636600461100a565b61026b565b005b6101167f000000000000000000000000000000000000000000000000000000000000000081565b6101167f000000000000000000000000000000000000000000000000000000000000000081565b61015b610339565b6101bd620f424081565b60405190815260200161012a565b6101bd6101d93660046110a6565b6001600160a01b031660009081526003602052604090205490565b61015b6103c9565b6101167f000000000000000000000000000000000000000000000000000000000000000081565b61015b6102313660046110c1565b610490565b6101bd600081565b6101bd60005481565b6101bd6102553660046110f4565b610816565b606061026660016108bb565b905090565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102b457604051636f61f64160e01b815260040160405180910390fd5b60008413156102f6576102f16001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633866108cf565b610333565b6000831315610333576103336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633856108cf565b50505050565b6040516351cff8d960e01b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906351cff8d990602401600060405180830381600087803b15801561039a57600080fd5b505af11580156103ae573d6000803e3d6000fd5b505050506103c633600161092690919063ffffffff16565b50565b33600090815260036020526040812054908190036103fa5760405163887efaa560e01b815260040160405180910390fd5b3360009081526003602052604081208190558054829190819061041e908490611123565b9091555061045890506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633836108cf565b60405181815233907fe8354b169cd993d5cdfad1036a9a3f1ea7ed77e430bccb279200fd088243f5959060200160405180910390a250565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104d95760405163068690bf60e11b815260040160405180910390fd5b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610540573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105649190611136565b905060005481116105885760405163887efaa560e01b815260040160405180910390fd5b600080546105969083611123565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061c9190611136565b90508060000361066c5761063182858861093b565b6040518281527f6d1c76d614228b523baa4dcd9539e2c713b54ff4ab3ff2d1627e7f6cd32be4429060200160405180910390a1505050505050565b600061067c8387620f4240610b11565b905061068981868961093b565b6106938184611123565b925060006106a16001610b26565b9050836000808282546106b4919061114f565b90915550600090505b818110156107cf5760006106d2600183610b30565b6040516370a0823160e01b81526001600160a01b038281166004830152919250600091610772917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa158015610744573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107689190611136565b620f424088610b11565b905060006107848883620f4240610b11565b905080600003610796575050506107c7565b6001600160a01b038316600090815260036020526040812080548392906107be90849061114f565b90915550505050505b6001016106bd565b507f6d1c76d614228b523baa4dcd9539e2c713b54ff4ab3ff2d1627e7f6cd32be4426107fb838661114f565b60405190815260200160405180910390a15050505050505050565b6000610823600133610b3c565b50604051636e553f6560e01b8152600481018390523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636e553f65906044016020604051808303816000875af1158015610891573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b59190611136565b92915050565b606060006108c883610b51565b9392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610921908490610bad565b505050565b60006108c8836001600160a01b038416610c87565b8260000361095c5760405163887efaa560e01b815260040160405180910390fd5b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663128acb083060018661099e6401000276a383611162565b60405160e086901b6001600160e01b03191681526001600160a01b03948516600482015292151560248401526044830191909152909116606482015260a06084820152600060a482015260c40160408051808303816000875af1158015610a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2d9190611182565b50506040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610a96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aba9190611136565b905082811015610add5760405163569d45cf60e11b815260040160405180910390fd5b6103336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001683836108cf565b6000610b1e848484610d81565b949350505050565b60006108b5825490565b60006108c88383610e21565b60006108c8836001600160a01b038416610e4b565b606081600001805480602002602001604051908101604052809291908181526020018280548015610ba157602002820191906000526020600020905b815481526020019060010190808311610b8d575b50505050509050919050565b6000610c02826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610e9a9092919063ffffffff16565b9050805160001480610c23575080806020019051810190610c2391906111a6565b6109215760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b60008181526001830160205260408120548015610d70576000610cab600183611123565b8554909150600090610cbf90600190611123565b9050818114610d24576000866000018281548110610cdf57610cdf6111c8565b9060005260206000200154905080876000018481548110610d0257610d026111c8565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610d3557610d356111de565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506108b5565b60009150506108b5565b5092915050565b8282026000198385098181108201900380610db25782610da95763ae47f7026000526004601cfd5b508190046108c8565b808311610dc75763ae47f7026000526004601cfd5b82848609600084810385169485900494848311909303908390038390046001010292030417600260038302811880840282030280840282030280840282030280840282030280840282030280840290910302029392505050565b6000826000018281548110610e3857610e386111c8565b9060005260206000200154905092915050565b6000818152600183016020526040812054610e92575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556108b5565b5060006108b5565b6060610b1e848460008585600080866001600160a01b03168587604051610ec19190611218565b60006040518083038185875af1925050503d8060008114610efe576040519150601f19603f3d011682016040523d82523d6000602084013e610f03565b606091505b5091509150610f1487838387610f1f565b979650505050505050565b60608315610f8e578251600003610f87576001600160a01b0385163b610f875760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c7e565b5081610b1e565b610b1e8383815115610fa35781518083602001fd5b8060405162461bcd60e51b8152600401610c7e9190611234565b6020808252825182820181905260009190848201906040850190845b81811015610ffe5783516001600160a01b031683529284019291840191600101610fd9565b50909695505050505050565b6000806000806060858703121561102057600080fd5b8435935060208501359250604085013567ffffffffffffffff8082111561104657600080fd5b818701915087601f83011261105a57600080fd5b81358181111561106957600080fd5b88602082850101111561107b57600080fd5b95989497505060200194505050565b80356001600160a01b03811681146110a157600080fd5b919050565b6000602082840312156110b857600080fd5b6108c88261108a565b6000806000606084860312156110d657600080fd5b6110df8461108a565b95602085013595506040909401359392505050565b60006020828403121561110657600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156108b5576108b561110d565b60006020828403121561114857600080fd5b5051919050565b808201808211156108b5576108b561110d565b6001600160a01b03818116838216019080821115610d7a57610d7a61110d565b6000806040838503121561119557600080fd5b505080516020909101519092909150565b6000602082840312156111b857600080fd5b815180151581146108c857600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b60005b8381101561120f5781810151838201526020016111f7565b50506000910152565b6000825161122a8184602087016111f4565b9190910192915050565b60208152600082518060208401526112538160408501602087016111f4565b601f01601f1916919091016040019291505056fea2646970667358221220b256024d6a23b98168735c5a5b95114b2428c297d96b6ed874f8827d3159b97664736f6c63430008180033",
  "devdoc": {
    "details": "The rewards are distributed to the users and a specified receiver address",
    "errors": {
      "InvalidEntry()": [
        {
          "details": "Error thrown when the input is invalid"
        }
      ],
      "NotEnoughBalance()": [
        {
          "details": "Error thrown when the balance is not enough"
        }
      ],
      "NotPool()": [
        {
          "details": "Error thrown when the caller is not the pool"
        }
      ],
      "WrongCaller()": [
        {
          "details": "Error thrown when the caller is not the PositionManager contract"
        }
      ]
    },
    "events": {
      "RewardCollected(address,uint256)": {
        "params": {
          "amount": "Amount of USDT collected",
          "user": "Address of the user"
        }
      },
      "RewardsDistributed(uint256)": {
        "params": {
          "amount": "Amount of USDT distributed"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "params": {
          "user": "Address of the user"
        }
      },
      "collectRewards()": {
        "details": "User must have a balance greater than 0"
      },
      "constructor": {
        "params": {
          "_pool": "Address of the PancakeSwap V3 pool of USDT/WNative",
          "params": "Parameters to create the PositionManager contract"
        }
      },
      "deposit(uint256)": {
        "params": {
          "depositAmount": "Amount of USDT to deposit"
        }
      },
      "distributeRewards(address,uint256,uint256)": {
        "details": "Only the PositionManager contract can call this function",
        "params": {
          "amountOutMin": "Minimum amount of wnative to receive",
          "receiverAddress": "Address of the receiver of the fees",
          "receiverPercentage": "Percentage of the funds destined to the receiver"
        }
      },
      "usersSet()": {
        "returns": {
          "_0": "Users set"
        }
      }
    },
    "stateVariables": {
      "_balances": {
        "details": "Mapping of the balances of the users"
      },
      "_usersSet": {
        "details": "Set of users that have deposited USDT"
      }
    },
    "title": "PositionManagerDistributor",
    "version": 1
  },
  "userdoc": {
    "events": {
      "RewardCollected(address,uint256)": {
        "notice": "Event emitted when the user collects the rewards"
      },
      "RewardsDistributed(uint256)": {
        "notice": "Event emitted when the rewards are distributed"
      }
    },
    "kind": "user",
    "methods": {
      "DEFAULT_ADMIN_ROLE()": {
        "notice": "Default admin role"
      },
      "MAX_PERCENTAGE()": {
        "notice": "Maximum percentage value with 4 decimals"
      },
      "balanceOf(address)": {
        "notice": "Get the balance of a user"
      },
      "collectRewards()": {
        "notice": "Collect rewards for the caller"
      },
      "constructor": {
        "notice": "Constructor"
      },
      "deposit(uint256)": {
        "notice": "Deposit USDT to the positionManager"
      },
      "distributeRewards(address,uint256,uint256)": {
        "notice": "Distribute the rewards accumulated by the PositionManager contract"
      },
      "pool()": {
        "notice": "Pool of USDT/WNative"
      },
      "sharesContract()": {
        "notice": "PositionManager contract"
      },
      "usdt()": {
        "notice": "USDT address"
      },
      "usersSet()": {
        "notice": "Get the users set"
      },
      "usersTotalBalances()": {
        "notice": "Total amount of USDT in the contract owned by the users"
      },
      "withdraw()": {
        "notice": "Withdraw Funds from the positionManager"
      },
      "wnative()": {
        "notice": "WNative address"
      }
    },
    "notice": "Distributes the rewards of the PositionManager contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7962,
        "contract": "contracts/PositionManagerDistributor.sol:PositionManagerDistributor",
        "label": "usersTotalBalances",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7966,
        "contract": "contracts/PositionManagerDistributor.sol:PositionManagerDistributor",
        "label": "_usersSet",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AddressSet)4767_storage"
      },
      {
        "astId": 7971,
        "contract": "contracts/PositionManagerDistributor.sol:PositionManagerDistributor",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)4767_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4766,
            "contract": "contracts/PositionManagerDistributor.sol:PositionManagerDistributor",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4452_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4452_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4447,
            "contract": "contracts/PositionManagerDistributor.sol:PositionManagerDistributor",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4451,
            "contract": "contracts/PositionManagerDistributor.sol:PositionManagerDistributor",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}